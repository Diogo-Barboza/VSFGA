{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Seja bem vindo a VSFGA! \ud83d\udc4b","text":"<p>Ol\u00e1! Se voc\u00ea chegou at\u00e9 aqui, provavelmente faz parte da fam\u00edlia FGA e est\u00e1 buscando uma forma de organizar (ou encontrar!) os materiais da nossa jornada em Engenharia de Software.</p> <p>Este site, carinhosamente apelidado de VSFGA (voc\u00ea sabe porque...), nasceu de uma ideia simples: centralizar e organizar os materiais que acumulei ao longo dos semestres na Universidade de Bras\u00edlia e como uma forma de revisar tudo digitando tudo para entender. Como estudante, sei o quanto \u00e9 valioso ter um ponto de refer\u00eancia confi\u00e1vel para revisar conte\u00fados, entender conceitos e at\u00e9 mesmo ter um \"norte\" para o que est\u00e1 por vir. \ud83e\udded</p> <p>Fluxograma do meu semestre:</p> <p>Seu navegador n\u00e3o suporta iframes. Voc\u00ea pode clicar aqui para baixar o PDF.</p>"},{"location":"about/","title":"Voto tempora onere mihi in rex miscuit","text":""},{"location":"about/#turbinis-procis-praemonuisse-undis-ora-gaudet","title":"Turbinis procis praemonuisse undis ora gaudet","text":"<p>Lorem markdownum, metu qui; alas est? Et Lampetie suis; palmis quoque, futurae Gangesque montis. Tamen quis, ullus erat dixit miseris nomen, pietas. Figurae mea videt intrarant tres indefletaeque vento in seque ut locus ignesque Lyciae.</p> <ol> <li>Tenet inperfectus portis</li> <li>Ardor quocumque media tibi similemque perfudit vestem</li> <li>Arbitrium et primus a perenni ponti</li> <li>Socium quaque mentis volentes omnes munus voluit</li> <li>Moenia potitur nec illi Cyllenaeo versant temptasset</li> </ol>"},{"location":"about/#genuit-et-utero","title":"Genuit et utero","text":"<p>Petere adimunt dis, murraeque Medusaeo ferrum salictis vidistis abies lacus, natos passae et locorum! Incunabula catenis, Telamon servavit formae in media, atra tum, duo simul Apollinis: quod! Linguam futuri nomine adorat, nostri sis: et faber. Discedens quamvis auctor Amorque, sui ipso nemus, Parthenopeia linguae dea. Causa aquarum exstantem, neci relictus, struxerit Lacinia tremiscens semina murmure, Erysicthonis isse.</p> <ul> <li>Suum summo</li> <li>Cum telas inhonorati ventos quia quam ero</li> <li>Navibus mare superbum spissi</li> <li>Ac ne qua ferat Perseus terram</li> <li>Pars corda caelique contigerat memor pariter pervenit</li> <li>Discedunt committi antri</li> </ul> <p>Quam omnes: animam ora numen damnare est dixerat contingere incipiens venisses. Pars crimine procubuit merito! Caeneus te coeunt pleni viae vidit referunt adduntque precamur obstas et siquidem quid celsoque, conantesque. Hederae percusso, alta sanguine mecum, et taedia sinistro. Flammis Lethaei; ferroque quem Herculeamque dimovit et dolore aut lucis tenerum successit Thisbes.</p>"},{"location":"about/#faciemque-boum-semper-impune-celeberrimus-oracula-siste","title":"Faciemque boum semper impune celeberrimus oracula siste","text":"<p>Lingua inspiratque labefecit, iuvenes ab adit se omnia mihi, est inpune fato! Tamen est Antiphates si caelesti ventusve hostem magnae quondam per, lucis hostilia.</p> <p>Invenies praerupit ipse, patefecit attonitus differt abest orbus est, ille. Hanc silent auris mitia et tibia ignesque, sub paene cuius; ut cruori omnis? Morbis aratos et tamen toto gessit Talibus, generis oris vereri. Anili in lege oculos mundi odit soporem malo, in sequerer mihi, fama non corpus dixerat in corpora opes. Aut per addita simile sibi dea quies popularis queritur tendunt o.</p> <p>Modo regia notat crura recepto paries suumque amplexuque iussa libidinis Themin! Equi in in, facit pars huc. Lunae legit indutus ad duxerat dicere transcurrere supero: neque similem Bacchus venenis mori vincemus, ille!</p>"},{"location":"sections/2024.2/EDA/","title":"Estrutura de Dados 1","text":"<p>Estudo r\u00e1pido para prova (coisas que podem cair na minha cabe\u00e7a)</p>"},{"location":"sections/2024.2/EDA/#analise-de-algoritmo","title":"An\u00e1lise de algoritmo","text":""},{"location":"sections/2024.2/EDA/#funcao-custo","title":"Fun\u00e7\u00e3o custo","text":"<ul> <li>Constante -&gt; F(n) = c</li> <li>linear -&gt; F(n) = a * n + b</li> <li>quadr\u00e1tica -&gt; F(n) = a * n ^ 2 + b * n + c</li> <li>c\u00fabica -&gt; F(n) = a * n ^ 3 + b * n ^ 2 + c * n + d</li> <li>exponencial -&gt; F(n) = K ^ n</li> <li>fatorial -&gt; F(n) = N!</li> <li>logaritmico -&gt; F(n) = log n</li> <li>linearitmico -&gt; F(n) = n log n</li> </ul>"},{"location":"sections/2024.2/EDA/#complexidade","title":"Complexidade","text":"<ul> <li>Interessada no tempo de exec de acordo com que n cresce.</li> <li>big O.</li> <li>Exemplo: Busca sequencial -&gt; O(n), custo cresce no m\u00e1ximo de acordo com crescimento de n.</li> <li>Com o custo de F(n) = 4 * n ^ 2 + 4 * n + 1, complexidade -&gt; O(n ^ 2).</li> </ul>"},{"location":"sections/2024.2/EDA/#ordenacao-de-dados","title":"Ordena\u00e7\u00e3o de Dados","text":"<p>Organiza\u00e7\u00e3o otimiza as buscas, mais previsibilidade.</p> <ul> <li>Complexidade (espacial e temporal) <ul> <li>Quadr\u00e1tico -&gt; simples e suficiente para arquivos pequenos. </li> <li>Linear\u00edtmicos -&gt; complexos e eficientes para arquivos grandes. </li> </ul> </li> </ul>"},{"location":"sections/2024.2/EDA/#selection-sort","title":"Selection Sort","text":"<p>Come\u00e7a no in\u00edcio do vetor, buscando nos proximos, menores que o atual. E trocando.</p> <ul> <li>Complexidade -&gt; O(N ^ 2).</li> <li>Custo -&gt; Quadr\u00e1tica.</li> <li>N\u00e3o adaptativo.</li> <li>N\u00e3o est\u00e1vel.</li> <li>In-place -&gt; N\u00e3o utiliza mem\u00f3ria extra significativa.</li> </ul>"},{"location":"sections/2024.2/EDA/#bubble-sort","title":"Bubble Sort","text":"<p>Acha o maior e coloca no topo (fim do vetor), assim que coloca um no topo, volta e faz todo o resto do vetor.</p> <ul> <li>Complexidade -&gt; Pior, m\u00e9dio caso O(N ^ 2).</li> <li>Custo -&gt; Quadr\u00e1tica.</li> <li>Adaptativo.</li> <li>Est\u00e1vel. N\u00e3o troca os iguais.</li> <li>In-place -&gt; N\u00e3o utiliza mem\u00f3ria extra significativa.</li> </ul>"},{"location":"sections/2024.2/EDA/#insertion-sort","title":"Insertion Sort","text":"<p>Inserir cada elemento j\u00e1 na posi\u00e7\u00e3o correta, com rela\u00e7\u00e3o aos anteriores. Cada itera\u00e7\u00e3o (vetor parcialmente ordenado).</p> <ul> <li>Complexidade<ul> <li>Pior caso -&gt; (N ^ 2) / 2</li> <li>M\u00e9dio caso -&gt; (N ^ 2) / 4</li> </ul> </li> <li>Adaptativo.</li> <li>Est\u00e1vel</li> <li>In-place</li> </ul>"},{"location":"sections/2024.2/EDA/#shell-sort","title":"Shell Sort","text":"<ul> <li>No pior caso n\u00e3o \u00e9 necessariamente quadr\u00e1tico.</li> <li>Adaptativo</li> <li>N\u00e3o est\u00e1vel</li> <li>In-place</li> </ul>"},{"location":"sections/2024.2/EDA/#ordenacao-de-dados-eficiente","title":"Ordena\u00e7\u00e3o de Dados Eficiente","text":"<ul> <li>Liner\u00edtmicos<ul> <li>O(n log n)</li> <li>Melhor custo quando a ordenac\u0327a\u0303o e\u0301 por comparac\u0327a\u0303o do valor da chave</li> <li>Mais amplo (varias chaves com o mesmo algoritmo)</li> </ul> </li> <li>Linear\u00edtmicos<ul> <li>O(n)</li> <li>Mais restrito (Um tipo de chave)</li> </ul> </li> </ul>"},{"location":"sections/2024.2/EDA/#merge-sort","title":"Merge Sort","text":"<p>Dividir e conquistar. Abordagem Top-Down, de uma lista gera sub listas. RECURSIVAMENTE</p> <ul> <li>Complexidade -&gt; O(N log N). Pior e M\u00e9dio caso</li> <li>Mem\u00f3ria extra -&gt; Proporcional a N</li> <li>Mantem ordem relativa</li> </ul>"},{"location":"sections/2024.2/EDA/#em-sub-vetores-menores-alterne-para-o-insertion-sort","title":"Em sub-vetores menores, alterne para o Insertion Sort","text":""},{"location":"sections/2024.2/EDA/#testar-se-o-vetor-ja-esta-em-ordem","title":"Testar se o vetor j\u00e1 est\u00e1 em ordem.","text":""},{"location":"sections/2024.2/EDA/#quick-sort","title":"Quick Sort","text":"<p>Um dos mais utilizados, simples, eficiente. Separa os elementos baseado em 1 elemento. Escolher um piv\u00f4. </p> <ul> <li>Piv\u00f4 -&gt; Elemento mais a direita ou mais a esquerda.</li> <li>La\u00e7o para procurar elementos.</li> <li>Mem\u00f3ria extra -&gt; Proporcional a (Log N).</li> <li>N\u00e3o est\u00e1vel.</li> <li>M\u00e9dio -&gt; n log n.</li> </ul>"},{"location":"sections/2024.2/EDA/#heap-sort","title":"Heap Sort","text":"<p>Usa fila de prioridade para ordenar elementos, sem necessidade de espa\u00e7os extras</p> <ul> <li>Complexidade = O(n log n)</li> <li>In-place</li> <li>N\u00e3o est\u00e1vel</li> <li>N\u00e3o adaptativo</li> </ul>"},{"location":"sections/2024.2/EDA/#intro-sort","title":"Intro Sort","text":"<p>Importante organiza\u00e7\u00e3o de algoritmos de ordena\u00e7\u00e3o. Pois \u00e9 H\u00cdBRIDO, com duas op\u00e7\u00f5es:</p> <ul> <li>quick + merge(Mais espa\u00e7o) + insertion</li> <li>quick + heap(maior constante) + insertion</li> </ul> <p>Solu\u00e7\u00e3o para usar as efici\u00eancias e evitar as defici\u00eancias de cada um:</p> <ul> <li>Insertion -&gt; ADAPTATIVO</li> <li>Quick -&gt; Bom desempenho na maioria dos casos e inplace (- mem\u00f3ria extra)</li> <li>Merge e Heap -&gt; Desempenho previs\u00edvel para todos os casos</li> <li>Quando a profundidade da recusrividade atinge um m\u00e1ximo estipulado alterna-se para outro m\u00e9todo de ordena\u00e7\u00e3o</li> <li>Complexidade no pior caso: O(n log n)</li> <li>In-place <ul> <li>Merge: Espa\u00e7o extra, proporcional a N.</li> <li>Heap e quick: IN-PLACE</li> </ul> </li> <li>N\u00e3o est\u00e1vel</li> <li>N\u00e3o adaptativo</li> </ul>"},{"location":"sections/2024.2/EDA/#counting-sort","title":"Counting Sort","text":"<ul> <li>Linear\u00edtmicos<ul> <li>O(n log n)</li> <li>Ordena\u00e7\u00e3o por compara\u00e7\u00e3o do valor das chaves</li> </ul> </li> <li> <p>Lineares</p> <ul> <li>O(n)</li> <li>Ordena\u00e7\u00e3o por compara\u00e7\u00e3o das partes de formam as chaves</li> </ul> </li> <li> <p>Contar frequ\u00eancia das chaves </p> </li> <li>Calcular as posi\u00e7\u00f5es das frequ\u00eancias</li> <li> <p>Distribuir as chaves</p> </li> <li> <p>Complexidade no pior caso: O(N + R)</p> <ul> <li>N: N\u00famero de chaves</li> <li>R: Intervalo das chaves</li> </ul> </li> <li>N\u00e3o in-place</li> <li>Est\u00e1vel</li> <li>N\u00e3o adaptativo</li> </ul>"},{"location":"sections/2024.2/EDA/#radix-sort","title":"Radix Sort","text":"<p>Ordenar pela raix(radix) da representa\u00e7\u00e3o dos dados. Decompor as estruturas</p> <ul> <li>Envolve opera\u00e7\u00f5es custosas</li> <li>Alternativa: Decompor por bytes.</li> </ul>"},{"location":"sections/2024.2/EDA/#resumo-das-ordenacoes-existentes","title":"Resumo das Ordena\u00e7oes Existentes","text":""},{"location":"sections/2024.2/FAC/","title":"Revi\u00e3o pra prova - FAC P2 (T\u00d3PICOS)","text":"<p>Estudar amanh\u00e3 esta parte espec\u00edfica, revisar por cima todos os outros conte\u00fados.</p>"},{"location":"sections/2024.2/FAC/#overflow","title":"Overflow","text":"<ul> <li>Na adi\u00e7\u00e3o</li> <li>Na subtra\u00e7\u00e3o</li> </ul>"},{"location":"sections/2024.2/FAC/#representacoes","title":"Representa\u00e7\u00f5es","text":"<ul> <li>Excesso</li> <li>Complemento a 1</li> <li>Complemento a 2</li> </ul>"},{"location":"sections/2024.2/FAC/#ponto-flutuante","title":"Ponto Flutuante","text":"<ul> <li>Como computador representa</li> <li>Simples e Dupla</li> </ul>"},{"location":"sections/2024.2/FAC/#operacoes-com-ponto-flutuante","title":"Opera\u00e7\u00f5es com Ponto Flutuante","text":"<ul> <li>Adi\u00e7\u00e3o </li> <li>Multiplica\u00e7\u00e3o</li> </ul>"},{"location":"sections/2024.2/FAC/#divisao-de-inteiros","title":"Divis\u00e3o de Inteiros","text":"<ul> <li>Ideia do algoritmo</li> <li>Algoritmo otimizado em MIPS &lt;- IMPORTANTE</li> </ul>"},{"location":"sections/2024.2/FAC/#multiplicacao-de-inteiros","title":"Multiplica\u00e7\u00e3o de Inteiros","text":"<ul> <li>Ideia do algoritmo</li> <li>Algortimo b\u00e1sico e otimizado em MIPS &lt;- IMPORTANTE</li> </ul>"},{"location":"sections/2024.2/Requisitos/","title":"Requisitos","text":""},{"location":"sections/2024.2/Requisitos/#sumario","title":"Sum\u00e1rio","text":"<ol> <li>Unidade 1<ol> <li>Fundamentos de Eng. Software (Overview: Abordagens, Ciclos de Vida, Processos.)</li> <li>Introduc\u0327a\u0303o a Engenharia de Requisitos (ER)</li> <li>Processo de ER</li> <li>Valores e Princi\u0301pios da ER</li> <li>Tipos de Requisitos e Regras de Nego\u0301cio</li> <li>Entendendo Problema e Necessidades</li> </ol> </li> <li>Unidade 2<ol> <li>Atividades e Te\u0301cnicas de ER</li> <li>Definic\u0327a\u0303o do Backlog do Produto</li> <li>Definic\u0327a\u0303o de MVP </li> <li>DoR e DoD</li> </ol> </li> <li>Unidade 3<ol> <li>Fundamentos, conceitos e exerci\u0301cios: PBB e BDD</li> <li>User Story Mapping</li> <li>Aspectos humanos e sociais da Engenharia de Requisitos</li> </ol> </li> <li>Unidade 4<ol> <li>Modelos de casos de uso</li> <li>Especificac\u0327a\u0303o de casos de uso </li> </ol> </li> </ol>"},{"location":"sections/2024.2/Requisitos/#fundamentos-de-eng-software","title":"Fundamentos de Eng. Software","text":""},{"location":"sections/2024.2/Requisitos/#abordagem-de-desenvolvimento-de-software","title":"Abordagem de desenvolvimento de Software","text":""},{"location":"sections/2024.2/Requisitos/#abordagem-dirigida-por-plano","title":"Abordagem dirigida por Plano","text":"<ul> <li>Maior esfor\u00e7o no planejamento inicial.</li> <li>Requisitos s\u00e3o bem definidos antes da implementa\u00e7\u00e3o</li> <li>Processos sequencial: an\u00e1lise -&gt; projeto -&gt; implementa\u00e7\u00e3o -&gt; testes.</li> <li>Vantagens: Ideal para projetos grandes e cr\u00edticos (exemplos: sistemas aeroespaciais, UTIs).</li> <li>Desvantagens: Se os requisitos mudam,h\u00e1 necessidades de retrabalho, tornando-o pouco flex\u00edvel.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#abordagem-agil","title":"Abordagem \u00c1gil","text":"<ul> <li>Melhor para ambientes din\u00e2micos e projetos que exigem rapidez.</li> <li>Desenvolvimento em incrementos permitindo feedback cont\u00ednuo dos us\u00faarios.</li> <li>Redu\u00e7\u00e3o da documenta\u00e7\u00e3o formal -&gt; foco na comunica\u00e7\u00e3o e colabora\u00e7\u00e3o.</li> <li>Ideal para Software de neg\u00f3cio e startups, onde os requisitos mudam frequentemente.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#ciclos-de-vida-do-software","title":"Ciclos de vida do Software","text":"<p>O ciclo de vida representa as fases que um software passa, desde sua defini\u00e7\u00e3o at\u00e9 sua descontinua\u00e7\u00e3o.</p>"},{"location":"sections/2024.2/Requisitos/#ciclo-de-vida-preditivo-modelo-cascata","title":"Ciclo de vida preditivo (Modelo Cascata)","text":"<ul> <li>Modelo sequencial (cada fase termina antes da pr\u00f3xima come\u00e7ar).</li> <li>Melhor para projetos com requisitos bem definidos.</li> <li>Problema: qualquer mudan\u00e7a exige recome\u00e7ar o projeto.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#ciclo-de-vida-iterativo","title":"Ciclo de Vida Iterativo","text":"<ul> <li>Permite obter o feedback antes da finaliza\u00e7\u00e3o do software.</li> <li>Mais flex\u00edvel que o modelo cascata.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#ciclo-de-vida-incremental","title":"Ciclo de Vida Incremental","text":"<ul> <li>Cada entrega fornece uma vers\u00e3o utiliz\u00e1vel do produto.</li> <li>Cliente pode come\u00e7ar a suar partes do software antes da finaliza\u00e7\u00e3o completa.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#ciclo-de-vida-agil","title":"Ciclo de Vida \u00c1gil","text":"<ul> <li>Combina caracter\u00edsticas dos modelos iterativos e incremental.</li> <li>Prioriza entregas cont\u00ednuas e feedback constante.</li> <li>Exemplos: Scrum, XP, Kanban.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#ciclo-de-vida-hibrido","title":"Ciclo de Vida H\u00edbrido","text":"<ul> <li>Mistura abordagens preditivas e \u00e1geis para entender necessidades espec\u00edficas do projeto.</li> <li>Exemplo: Um software pode ter um n\u00facleo desenvolvido com abordagem preditiva, enquanto novas funcionalidade seguem um modelo \u00e1gil.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#processos-de-desenvolvimento-de-software","title":"Processos de Desenvolvimento de Software","text":"<p>Os processos organizam como um software e contru\u00eddo.</p>"},{"location":"sections/2024.2/Requisitos/#modelo-cascata","title":"Modelo Cascata","text":"<ul> <li>Processo Linear -&gt; Cada etapa deve ser finalizada antes da pr\u00f3xima come\u00e7ar.</li> <li>Pouca Flexibilidade, pois mudan\u00e7as exigem refazer fases anteriores.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#modelo-espiral","title":"Modelo Espiral","text":"<ul> <li>Baseado na an\u00e1lise de riscos.</li> <li>Cada ciclo gera uma vers\u00e3o refinada do software.</li> <li>Mais indicado para projetos de grande porte e com altos riscos.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#modelo-rad-rapid-application-developmnet","title":"Modelo RAD (Rapid Application Developmnet)","text":"<ul> <li>Foco na prootipa\u00e7\u00e3o r\u00e1pida, com feedback constante do usu\u00e1rio.</li> <li>Bom para sistemas que precisam ser entregas rapidamente.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#unified-processo-processo-unificado","title":"Unified Processo (Processo Unificado)","text":"<ul> <li>Iterativo e incremental. </li> <li>Identifica\u00e7\u00e3o de requisitos ocorre no in\u00edcio, mas com possibilidade de adapta\u00e7\u00f5es ao longo do tempo.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#scrum","title":"Scrum","text":"<ul> <li>Framework \u00c1gil -&gt; organiza o projeto em sprints (itera\u00e7\u00e3o de 2 a 4 semanas).</li> <li>Equipe auto-organizada prorizam tarefas.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#extreme-programming-xp","title":"Extreme Programming (XP)","text":"<ul> <li>M\u00e9todo \u00e1gil voltado para a qualidade e desenvolvimento r\u00e1pido.</li> <li>Uso de teste automatizados e refatora\u00e7\u00e3o constante.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#safe-scaled-agile-framework","title":"SAFe (Scaled Agile Framework)","text":"<ul> <li>Escala m\u00e9todos \u00e1geis para grndes organiza\u00e7\u00f5es.</li> <li>Usa concietos do Lean, Agile e DevOps.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#introducao-a-engrenharia-de-requisitos","title":"Introdu\u00e7\u00e3o a Engrenharia de Requisitos","text":""},{"location":"sections/2024.2/Requisitos/#como-escolher-o-processo-de-desenvolvimento","title":"Como Escolher o processo de desenvolvimento?","text":"<p>A escolha do processo de desenvolvimento n\u00e3o \u00e9 uma \"receita de bolo. O engenheiro de software deve analisaro contexto do projeto e responder a perguntas sobre: - O sistema que est\u00e1 sendo desenvolviedo (aspectos humanos). - O time de desenvolvimento (aspectos humanos). - A organiza\u00e7\u00e3o que est\u00e1 desenvolvendo e adquirindo o sistema (aspectos organizacionais).</p>"},{"location":"sections/2024.2/Requisitos/#criterios-propostos-por-sommerville-para-escolher-uma-abordagem","title":"Crit\u00e9rios Propostos por Sommerville para Escolher uma Abordagem","text":""},{"location":"sections/2024.2/Requisitos/#perguntas-tecnicas","title":"Perguntas T\u00e9cnicas","text":"<ol> <li>Qual \u00e9 o tamanho do Sistema?Pequenos sistemas podem usar abordagens \u00e1geis, enquanto sistemas grandes exigem maior planejamento.</li> <li>Qual \u00e9 o tipo de sistema? Sistemas cr\u00edticos precisam de planejamento rigoroso.</li> <li>Qual \u00e9 a vida \u00fatil prevista para o sistema? Se for de longa dura\u00e7\u00e3o, pode precisar de planejamento mais detalhado.</li> <li>O sistema est\u00e1 sujeito a controle externo? Normas regulat\u00f3rias podem exigir processos mais estruturados.</li> </ol>"},{"location":"sections/2024.2/Requisitos/#perguntas-humanas","title":"Perguntas Humanas","text":"<ol> <li>Qual \u00e9 o n\u00edvel de compet\u00eancia da equipe? Equipes experientes lidam melhor com abordagens \u00e1geis.</li> <li>Como est\u00e1 organizada a equipe? Times distribu\u00eddos podem precisar de mais documenta\u00e7\u00e3o e processos definidos.</li> <li>Quais tecnologias est\u00e3o dispon\u00edveis? Algumas abordagens exigem ferramentas espec\u00edficas.</li> </ol>"},{"location":"sections/2024.2/Requisitos/#perguntas-organizacionais","title":"Perguntas Organizacionais","text":"<ol> <li>\u00c9 necess\u00e1rio um projeto detalhado antes da implementa\u00e7\u00e3o? Algumas empresas exigem especifica\u00e7\u00f5es rigorosas por contrato.</li> <li>A entrega incremental \u00e9 vi\u00e1vel? Se o cliente puder dar feedback cont\u00ednuo, abordagens \u00e1geis s\u00e3o melhores.</li> <li>Os clientes participar\u00e3o ativamente? Se sim, o uso de Scrum ou XP pode ser vantajoso.</li> <li>Quest\u00f5es culturais influenciam o projeto? Algumas organiza\u00e7\u00f5es t\u00eam resist\u00eancia a mudan\u00e7as \u00e1geis.</li> </ol>"},{"location":"sections/2024.2/Requisitos/#modelos-de-ciclo-de-vida-do-software","title":"Modelos de Ciclo de vida do Software","text":""},{"location":"sections/2024.2/Requisitos/#modelo-cascata_1","title":"Modelo Cascata","text":"<ul> <li>Processo linear e seuqencial -&gt; Cada fase precisa ser finalizada antes da pr\u00f3xima come\u00e7ar.</li> <li>Melhor para projetos previsiveis e est\u00e1veis.</li> <li>Desvantagem: Dif\u00edcil adapta\u00e7\u00e3o a mudan\u00e7as.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#modelo-incremental","title":"Modelo Incremental","text":"<ul> <li>Similar ao cascata, mas permite entregas praciais ao cliente.</li> <li>Melhor para projetos onde os requisitos podem mudar.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#modelo-evolutivo","title":"Modelo Evolutivo","text":"<ul> <li>Requisitos s\u00e3o revisados em cada ciclo de desenvolvimento.</li> <li>Ideal para Projetos com requisitos incertos ou em evolu\u00e7\u00e3o.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#modelo-espiral_1","title":"Modelo Espiral","text":"<ul> <li>Foco na an\u00e1lise de risco.</li> <li>Permite refinamento cont\u00ednuo do projeto.</li> <li>Exige bom gerenciamento de riscos e equipe experiente.</li> </ul>"},{"location":"sections/2024.2/Requisitos/#como-selecionar-o-modelo-ideal","title":"Como selecionar o modelo Ideal?","text":"<p>A escolha do modelo depende de quatro fatores principais:  - Requisitos do sistema -&gt; Est\u00e1veis ou vari\u00e1veis?  - Equipe de desenvolvimento -&gt; Experi\u00eancia, tamanho e organiza\u00e7\u00e3o.  - Envolvimento do usu\u00e1rio -&gt; Ele participa ativamente ou n\u00e3o?  - Tipo de projetos e riscos -&gt; Projeto cr\u00edtico ou flex\u00edvel. </p> <p></p>"},{"location":"sections/2024.2/Requisitos/#processos-de-er","title":"Processos de ER","text":""},{"location":"sections/2025.1/ADS/bpmn/","title":"BPMN","text":""},{"location":"sections/2025.1/ADS/bpmn/#consideracoes-iniciais","title":"Considera\u00e7\u00f5es Iniciais","text":"<p>Nota\u00e7\u00e3o padronizada para diagrama\u00e7\u00e3o de fluxos chamada Business Process Management Group (OMG). Sendo uma Nota\u00e7\u00e3o de Gereciamento de Processos de Neg\u00f3cio.</p> <ul> <li>Business Process Management Notation (BPMN)</li> </ul>"},{"location":"sections/2025.1/ADS/bpmn/#notacao-bpmn","title":"Nota\u00e7\u00e3o BPMN","text":""},{"location":"sections/2025.1/ADS/bpmn/#principais-abstracoes","title":"Principais Abstra\u00e7\u00f5es","text":"<ul> <li>PISCINA/POOL</li> <li>RAIA/LANE</li> <li>FASE/MILESTONE</li> <li>CONECTORES</li> <li>ATIVIDADES</li> <li>SUB-PROCESSOS</li> <li>CALL ACTIVITY / REUTILIZ\u00c1VEL</li> <li>EVENTOS</li> <li>GATEWAYS</li> <li>ITEMS E DADOS</li> </ul>"},{"location":"sections/2025.1/ADS/bpmn/#piscina-pool","title":"Piscina / Pool","text":"<p>Container que representa graficamente um participante em um processo.</p> <ul> <li>Comumente, um dado processo de neg\u00f3cio est\u00e1 contido em uma \u00fanica piscina</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#raia-lane","title":"Raia / Lane","text":"<p>Sub-parti\u00e7\u00e3o de um processo. BPMN n\u00e3o especifica exatamente o uso de raias.</p> <ul> <li>Comumente, utilizada para organizar e categorizar atividades dentro do mesmo.</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#fase-milestone","title":"Fase / Milestone","text":"<p>\u00c9 uma subdivis\u00e3o de uma pool.</p> <ul> <li>Normalmente, representando uma fase do processo ou um per\u00edodo de tempo determinado...</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#conectores","title":"Conectores","text":"<p>Elementos utilizados para mostrar a ordem de sequenciamento das atividades e dos eventos que ocorrem em um fluxo de trabalho.</p> <ul> <li>Cada conector tem apenas uma fonte e um alvo.</li> <li>Podem ser utilizados para definir o caminho principal de execu\u00e7\u00e3o  de um processo.</li> <li>Temos 3 tipos de conectores:<ul> <li>Fluxo de sequ\u00eancia</li> <li>Fluxo de mensagem</li> <li>Associa\u00e7\u00e3o</li> </ul> </li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#exemplos-de-aplicacao-dos-conectores","title":"Exemplos de aplica\u00e7\u00e3o dos CONECTORES:","text":""},{"location":"sections/2025.1/ADS/bpmn/#atividades","title":"Atividades","text":"<p>Representam pontos de processo, nos quais algum trabalho \u00e9 realizado.</p> <ul> <li>Possuem v\u00e1rios tipos de atividaes, mas geralemente \u00e9 utilizado o NONE.</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#sub-processos","title":"Sub-processos","text":"<p>\u00c9 uma \"atividade\" que tem em seu interior a modelagem de outras ativdiades.</p> <ul> <li>Um dos tipos de sub-processos mais comum \u00e9 o Embutido. Sendo um sub-processo em vis\u00e3o contra\u00edda.</li> </ul> <p></p> <ul> <li>Sub-Processo com ciclo: Muito utilizado</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#call-activity-reutilizavel","title":"Call Activity / Reutiliz\u00e1vel","text":"<p>Pode ser entendido como um sub-processo, mas que n\u00e3o tem depend\u00eancia com o processo pai.</p> <ul> <li>\u00c9 uma refer\u00eancia a um Subprocesso ou atividade definida globalmente e reutilziada no processo atual.</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#eventos","title":"Eventos","text":"<p>\u00c9 um sub-processo especializado, sendo que esse n\u00e3o parte de um fluxo normal do processo pai. al\u00e9m de nao ter entradas nem sa\u00eddas do fluxo de trabalho.</p> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#gateways","title":"Gateways","text":"<p>Utilizados para controlar como o fluxo de sequ\u00eancia seguir\u00e1 seu caminho (converg\u00eancia ou diverg\u00eancias)</p> <ul> <li>S\u00f3 \u00e9 necess\u00e1rio, caso haja necessidade de controlar o fluxo.</li> <li>Atua como mecanismo de porta, permitindo ou n\u00e3o a passagem do TOKEN por um determinado caminho.</li> </ul> <p></p>"},{"location":"sections/2025.1/ADS/bpmn/#itens-e-dados","title":"Itens e Dados","text":"<p>Utilizados para representar informa\u00e7\u00f5es e itens f\u00edsicos, e at\u00e9 armazenagem.</p>"},{"location":"sections/2025.1/ADS/cont/","title":"Contextualizando com Engenharia de Requisitos","text":"<p>Tudo come\u00e7a na E.R</p> <p></p>"},{"location":"sections/2025.1/ADS/cont/#desenho-de-software","title":"Desenho de Software","text":"<ul> <li>N\u00facleo t\u00e9cnico da engenharia de software.</li> </ul> <p>Basicamente, elementos do modelo de an\u00e1lise (Ex.: Casos de uso), fornecem insumos para cria\u00e7\u00e3o dos modelos de especifica\u00e7\u00f5es de projeto.</p> <p></p> <ul> <li>Define o que \u00e9 a solu\u00e7\u00e3o (Arquitet\u00f4nico)</li> <li>Define como \u00e9 a solu\u00e7\u00e3o (Projeot L\u00f3gico). Como cada componente deve ser implementado.</li> </ul> <p></p> <ul> <li> <p>Engenharia de Requisito:</p> <ul> <li>Modelagem do PROBLEMA (Entender)</li> <li>Qual o problema?</li> <li>Como ele ocorre?</li> <li>Mundo Real</li> </ul> </li> <li> <p>Desenho de Software</p> <ul> <li>Modelagem da SOLU\u00c7\u00c3O (Criar)</li> <li>Qual \u00e9 a solu\u00e7\u00e3o?</li> <li>Como ela ocorre?</li> <li>Mundo Computacional</li> </ul> </li> </ul>"},{"location":"sections/2025.1/ADS/cont/#artefatos-de-software","title":"Artefatos de Software","text":""},{"location":"sections/2025.1/ADS/cont/#5w2h","title":"5W2H","text":"<ul> <li>What?</li> <li>Why?</li> <li>Who?</li> <li>Where?</li> <li>When?</li> <li>How?</li> <li>How much?</li> </ul> <p>Exemplo: </p> <p></p>"},{"location":"sections/2025.1/ADS/cont/#rich-picture","title":"Rich Picture","text":"<ul> <li>Diagrama Causa-Efeito</li> <li>Ishikawa</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#brainstorm","title":"Brainstorm","text":""},{"location":"sections/2025.1/ADS/cont/#glossario","title":"Gloss\u00e1rio","text":"<ul> <li>Ligado \u00e0 Defini\u00e7\u00e3o.</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#lexico","title":"L\u00e9xico","text":"<ul> <li>Defini\u00e7\u00e3o + A\u00e7\u00e3o</li> <li>Verbo, Objeto, Estado</li> </ul> Tipo No\u00e7\u00e3o Impacto Verbo Quem realiza, quando acontece e quais os procedimentos envolvidos Quais os reflexos da a\u00e7\u00e3o no ambiente e quais os novos estados decorrentes Objeto Definir o objeto e identificar outros objetos com os quais se relaciona A\u00e7\u00f5es que podem ser aplicadas ao objeto Estado O que significa e quais a\u00e7\u00f5es levaram a esse estado Identificar outros estados e a\u00e7\u00f5es que podem ocorrer a partir do estado quie se descreve"},{"location":"sections/2025.1/ADS/cont/#tratando-sofware-como-produto","title":"Tratando Sofware como PRODUTO!","text":"<ul> <li>No sentido de estimativas<ul> <li>Tempo, esfor\u00e7o, cronograma, custo ...</li> </ul> </li> </ul>"},{"location":"sections/2025.1/ADS/cont/#design-sprint","title":"Design Sprint","text":"<ul> <li>MAP<ul> <li>Coletar o maior n\u00famero de informa\u00e7\u00f5es poss\u00edveis</li> <li>Big Picture (Sugest\u00e3o)</li> </ul> </li> <li>ESBO\u00c7O<ul> <li>Fazer desenhos de v\u00e1rias ideias</li> <li>Rich Picture</li> </ul> </li> <li>DECIDE<ul> <li>Qual ser\u00e1 a solu\u00e7\u00e3o?</li> <li>Rich Picture final</li> </ul> </li> <li>STORYBOARD<ul> <li>Ou prot\u00f3tipo (Ex.: FIGMA)</li> <li>J\u00e1 \u00e9 poss\u00edvel validar, prot\u00f3ticpo agrega demais e tem muito valor para os stakeholders.</li> </ul> </li> <li>AN\u00c1LISE (VALIDA\u00c7\u00c3O)<ul> <li>Usa personas (para identificar usu\u00e1rios)</li> <li>checklists</li> <li>Question\u00e1rios</li> </ul> </li> </ul>"},{"location":"sections/2025.1/ADS/cont/#processos-metodologias-abordagens","title":"Processos &amp; Metodologias &amp; Abordagens","text":""},{"location":"sections/2025.1/ADS/cont/#rup","title":"RUP","text":"<ul> <li>\u00c9 um processo, foi o primeiro de todos. Foco em equipes grandes, pois exige muita documenta\u00e7\u00e3o.</li> <li>Separado por disciplinas para desenvolvimento COMPLETO do software. Desde UX, Implementa\u00e7\u00e3o, e gest\u00e3o de risco.</li> </ul> <p>Possui 4 fases, sendo elas:</p> <ul> <li>Concep\u00e7\u00e3o</li> <li>Elabora\u00e7\u00e3o </li> <li>Constru\u00e7\u00e3o </li> <li>Transi\u00e7\u00e3o</li> </ul> <p>Sendo bem completo em todas as fases.</p>"},{"location":"sections/2025.1/ADS/cont/#openup","title":"OpenUP","text":"<p>Baseado no RUP, mas com uma pegada mais \u00e1gil, bem como os princ\u00edpios do Lean Inseption.</p> <ul> <li>Microincrementado. (Days).</li> <li>Intera\u00e7\u00e3o (Weeks).</li> <li>Projeto (Months).</li> </ul> <p></p> <ul> <li>Equilibrar prioridades</li> <li>Arquitetura</li> <li>Ciclos<ul> <li>Inicia\u00e7\u00e3o -&gt; Elabora\u00e7\u00e3o, contru\u00e7\u00e3o e transi\u00e7\u00e3o</li> </ul> </li> </ul>"},{"location":"sections/2025.1/ADS/cont/#metodologias-ageis-scrum","title":"Metodologias \u00c1geis (Scrum)","text":"<p>Criado para melhorar a gest\u00e3o de projetos, promovendo flexibilidade, colabora\u00e7\u00e3o e adapta\u00e7\u00e3o constante. - Transpar\u00eancia - Inspe\u00e7\u00e3o - Adapta\u00e7\u00e3o</p> <p>Possui 4 fases:</p> Fase Prop\u00f3sito Resultado Planning Definir escopo da itera\u00e7\u00e3o, quais itens ser\u00e3o entregues do backlog Um backlog possivelmente refinado, junto a um plano inicial de como ser\u00e1 ao longo Daily Reportar diariamente o progesso individual da equipe, o que foi feito dia anterior e poss\u00edveis impedimentos Resolver esses pos\u00edveis impedimentos e incentivar a comunica\u00e7\u00e3o do time Review Apresentar o incremento de produto desenvolvido na sprint, com inspe\u00e7\u00e3o, feedback e talvez adapta\u00e7\u00e3o de backlog Demonstra\u00e7\u00e3o do trabalho conclu\u00eddo, feedback dos stakeholders convertidos em novos itens do backlog Retrospective Refletir sobre o processo do time durante o Sprint, buscando pontos de melhoria, pontos de otimiza\u00e7\u00e3o Plano de melhorias para a pr\u00f3xima Sprint, com a\u00e7\u00f5es baseadas nos aprendizados da equipe, visando a evolu\u00e7\u00e3o cont\u00ednua do processo de trabalho"},{"location":"sections/2025.1/ADS/cont/#lean","title":"Lean","text":"<p>Resultado das pr\u00e1ticas e bons resultados do sistema Toyota, surgiu com esse objetivo de eliminar desperd\u00edcios, considerar prop\u00f3sitos claros, melhorar processos, entregar valor ao cliente.</p>"},{"location":"sections/2025.1/ADS/cont/#principios","title":"Princ\u00edpios:","text":"<ul> <li>Defini\u00e7\u00e3o de valor</li> <li>Mapeamento do fluxo de valor</li> <li>Criar fluxo</li> <li>Estabelecer um sistema puxado</li> <li>Buscar perfei\u00e7\u00e3o</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#boas-praticas","title":"Boas pr\u00e1ticas:","text":"<ul> <li>Identificar e eliminar desperd\u00edcios</li> <li>Focar na sarisfa\u00e7\u00e3o do cliente</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#promodoro-technique","title":"Promodoro Technique","text":"<p>Objetivo de melhorar o desempenho em qualquer tipo de trabalho ou estudo. Utilizando as t\u00e9cnicas de:</p> <ul> <li>Dividir o trabalho em pequenos intervalos (PROMODOROS).</li> <li>1 intervalo ap\u00f3s o promodoro (Pausa curta).</li> <li>Ap\u00f3s 4 promodoros uma pasua longa (15 a 30 min).</li> </ul> <p>Exemplo:</p> <ul> <li>25 min de trabalho focado.</li> <li>Pausa curta</li> <li>Repeti\u00e7\u00e3o de trabalho</li> <li>Pausa longa</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#crystal-methodology","title":"Crystal Methodology","text":"<p>Baseado na gest\u00e3o de pessoas. Dentre os princ\u00edpios:</p> <ul> <li>Comunica\u00e7\u00e3o frequente </li> <li>Adapta\u00e7\u00e3o cont\u00ednua</li> <li>Entrega frequente</li> <li>Foco em pessoas</li> </ul> <p>Ciclos:</p> <ul> <li>Exploration</li> <li>Planning</li> <li>Iteration</li> <li>Release</li> </ul> <p>Ideal para pequenas/m\u00e9dias equipes, por conta da flexibilidade e menos burocracia (documenta\u00e7\u00e3o).</p>"},{"location":"sections/2025.1/ADS/cont/#atomic-desing","title":"Atomic Desing","text":"<p>Uma abordagem modular e estruturada para desing de interfaces de usu\u00e1rios. Com objetivo de criar desing escal\u00e1veis, reutiliz\u00e1veis e consistentes.</p>"},{"location":"sections/2025.1/ADS/cont/#ciclo-do-atomic-desing","title":"Ciclo do atomic desing","text":"<ul> <li>A interface \u00e9 decomposta em seus elementos mais simples (\u00e1tomos)</li> <li>Esses elementos s\u00e3o recompostos at\u00e9 formar uma interface completa (p\u00e1ginas)</li> <li>O processo \u00e9 iterativo e cont\u00ednuo, permitindo reufinamento a cada itera\u00e7\u00e3o e reuso dos componentes.</li> </ul> <p>Separado em:</p>"},{"location":"sections/2025.1/ADS/cont/#atomos","title":"\u00c1tomos","text":"<ul> <li>Elementos b\u00e1sicos e indivis\u00edveis da interface, como bot\u00f5es, campos de entradas e r\u00f3tulos.</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#moleculas","title":"Mol\u00e9culas","text":"<ul> <li>S\u00e3o grupos de \u00e1tomos que juntos formam um componente menor, como bara de pesquisa ou campos de formul\u00e1rios</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#organismos","title":"Organismos","text":"<ul> <li>S\u00e3o grupos mais complexos de mol\u00e9culas e \u00e1tomos que formam se\u00e7\u00f5es distintas da interface, como cabe\u00e7alhos ou cards de produtos</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#organismos-com-diferentes-moleculas","title":"Organismos com diferentes mol\u00e9culas","text":"<p>Cada cabe\u00e7alho de um site \u00e9 organizado em um organismoe nele pode-se encontrar diferentes mol\u00e9culas, como:</p> <ul> <li>A Barra de pesquisa \u00e9 uma mol\u00e9cula</li> <li>O logotipo do site, pode ser considerado uma mol\u00e9cula simples</li> </ul>"},{"location":"sections/2025.1/ADS/cont/#organismos-com-moleculas-semelhantes","title":"Organismos com mol\u00e9culas semelhantes","text":"<p>Em sites de e-commerce, a disposi\u00e7\u00e3o dos produtos s\u00e3o formados por mol\u00e9culas de estruturas semelhantes.</p>"},{"location":"sections/2025.1/ADS/cont/#templates","title":"Templates","text":"<p>Layouts de p\u00e1gina no n\u00edvel de esqueleto, definindo estruturas onde os elementos reais ser\u00e3o colocados, por\u00e9m sem conte\u00fado real.</p>"},{"location":"sections/2025.1/ADS/cont/#pages","title":"Pages","text":"<p>S\u00e3o inst\u00e2ncias espec\u00edficas de templates com conte\u00fado real inserido, representando a p\u00e1gina final que o usu\u00e1rio ver\u00e1.</p>"},{"location":"sections/2025.1/ADS/ementa/","title":"Ementa Arquitetura e Desenho de Software","text":"<ol> <li>Contextualiza\u00e7\u00e3o para Desenho de Software</li> <li>BPMN</li> <li>Projeto/Desenho de Software Orientado a Objeto</li> <li>Padr\u00f5es de projetos (GRASP e GOoF)</li> <li>Contextualiza\u00e7\u00e3o para Arquitetura de Software</li> <li>Estilos Arquiteturais</li> <li>Padr\u00f5es Arquiteturais</li> <li>Documenta\u00e7\u00e3o de Arquitetura de Software</li> <li>Framework</li> </ol>"},{"location":"sections/2025.1/EDA1/bigO/","title":"Introdu\u00e7\u00e3o a complexidade e Big-O","text":"<p>Contar a quantidade de opera\u00e7\u00f5es \u00e9 dif\u00edcil, as vezes, \u00e9 at\u00e9 vi\u00e1vel, a ideia \u00e9 medir ordem de grandeza de quantiade de opera\u00e7\u00f5es:</p> <ul> <li>Como o total de opera\u00e7\u00f5es cresce ao longo que o tamanho cresce? Por meio da anota\u00e7\u00e3o assint\u00f3tica.</li> </ul> <p>Dizemos que uma fun\u00e7\u00e3o \\(f: \\mathbb{N} \\to \\mathbb{N}\\) \u00e9 \\(O(g(n))\\), com \\(g: \\mathbb{N} \\to \\mathbb{N}\\). Se existem constantes \\(C \\in \\mathbb{N}_0\\) tais que: </p> \\[ f(n) \\leq c \\cdot g(n), \\quad \\forall n \\geq n_0 \\]"},{"location":"sections/2025.1/EDA1/bigO/#medidas-padrao","title":"Medidas Padr\u00e3o","text":"<ul> <li>\\(O(1)\\) : Constante</li> <li>\\(O(\\log n)\\) : Logar\u00edtmico</li> <li>\\(O(n \\log n)\\) : Linear\u00edtmico</li> <li>\\(O(n^2)\\) : Quadr\u00e1tico</li> <li>\\(O(n^k)\\) : K - Polinomial</li> <li>\\(O(k^n)\\) : Exponencial</li> <li>\\(O(n!)\\) : Fatorial</li> </ul> <p>Com isso, os problemas passasm a ser classificados de acordo com a complexidade do melhor algoritmo que o resolve.</p>"},{"location":"sections/2025.1/EDA1/bigO/#casos-de-analise-de-complexidade","title":"Casos de An\u00e1lise de Complexidade","text":"<ul> <li>Acessar o i-\u00e9simo elemento do vetor v:<ul> <li>\\(V[i] = O(1)\\)</li> <li>Qual o endere\u00e7o de mem\u00f3ria ocupa v[i]?<ul> <li>\\(Endere\u00e7o Base + 4 \\times i\\)</li> </ul> </li> </ul> </li> </ul> <p>Importante olhar para a itera\u00e7\u00e3o em s\u00ed:</p> <ul> <li>Complexidade: \\(O(n)\\)</li> </ul> <pre><code>for(int i = 0; i &lt; n; i++){\n    /* O(1) */\n}\n</code></pre> <ul> <li>Complexidade: \\(O(1)\\)</li> </ul> <pre><code>for(int i = 0; i &lt; 1000000; i++){\n    /* O(1) */\n}\n</code></pre> <ul> <li>Complexidade: \\(O(n^2)\\)</li> </ul> <pre><code>for(int i = 0; i &lt; n; i++){\n    for(int j = 0; i &lt; n; i++){\n        /* O(1)*/\n    }\n}\n</code></pre> <ul> <li>Complexidade: \\(O(n \\times m)\\)</li> </ul> <pre><code>for(int i = 0; i &lt; n; i++){\n    for(int j = 0; j &lt; m; j++){\n        /* O(1) */\n    }\n}\n</code></pre> <ul> <li>Complexidade: \\(O(n^2)\\)</li> </ul> <pre><code>for(int i = 0; i &lt; n; i++){\n    for(int j = 0; j &lt; i; j++){\n        /* O(1) */\n    }\n}\n</code></pre> \\[ S = (0 + n-1) \\times \\frac{n}{2} = \\frac{1}{2} n^2 - \\frac{1}{2} n \\]"},{"location":"sections/2025.1/EDA1/bigO/#multiplicacao-de-matrizes","title":"Multiplica\u00e7\u00e3o de matrizes","text":"\\[ C_{ij} = 2_{k=1}^m A_{ik} \\cdot B_{kj} \\] <ul> <li>Complexidade: \\(O(n \\cdot m \\cdot p)\\) </li> </ul> <pre><code>for(int i = 0; i &lt; n; i++){\n    for(int j=0; j &lt; p; j++){\n        C[i][j] = 0;\n        for(int k = 0; k &lt; m; k++){\n            C[i][j] += A[i][k] * B[k][j];\n        }\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/bigO/#regra-geral","title":"Regra geral","text":"<p>A complexidade de um algoritmo \u00e9 a soma das complexidades de seus blocos n\u00e3o aninhados. Nesse sentido, a complexidade sera aquela do bloco mais caro.</p> <ul> <li> <p>Ex.:     $$     O(n) + O(n^2) + O(n^3) = O(n + n^2 + n^3) = O(n^3)     $$</p> </li> <li> <p>Complexidade: \\(O(\\log n)\\)</p> </li> </ul> <pre><code>for(int i = 1; i &lt; n; i *= 2){\n    /* O(1) */\n}\n</code></pre> <ul> <li>Complexidade: \\(O(n)\\)</li> </ul> <pre><code>for(int i = 0; i &gt; 0; i /= 2){\n    for(int j = 0; j &lt; i; j++){\n        /* O(1) */\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/busca/","title":"O problema de busca","text":"<p>Problema: Dado um conjunto S, verificar de um elemento x est\u00e1 ou n\u00e3o em S.</p> <pre><code>int busca(int *v, int n, int x){\n    for(int i=0; i &lt; n; i++){\n        if (v[i] == x) return i;\n    }\n\n    return -1;\n} // Complexidade (O(n))\n</code></pre> <p>E se os elementos de S estiverem em ordem crescente?</p> <p>PROBLEMA: Dado um conjunto S ordenado em ordem crescente, verificar se x pretence a S, devolver a posi\u00e7\u00e3o que ocupa, ou a posi\u00e7\u00e3o que deveria ocupar caso contr\u00e1rio. Em outras palavras, dado v[0 ... n-1] e um elemento x, queremos determinar j tal que \\(v[j-1] &lt; x &lt;= v[j]\\)</p> <p>Ex.:</p> <p>n = 8</p> <p>x = 15</p> 0 1 2 3 4 5 6 7 v -3 -1 1 7 10 15 18 21 <p>1\u00aa e = -1; m=(e+d)/2; d=n=8</p> <pre><code>int buscaBinaria(int *v, int n, int x){\n    int e = -1, d = n;\n    while(e &lt; d-1){\n        int m = (e + d) / 2;\n        if(x &gt; v[m]) e = m;\n        else d = m;\n    }\n    return d;\n} // Complexidade: O(lg n)\n</code></pre>"},{"location":"sections/2025.1/EDA1/ementa/","title":"Ementa de Estrutura de Dados 1","text":"<ol> <li>Introdu\u00e7\u00e3o</li> <li>Introdu\u00e7\u00e3o \u00e0 complexidade computacional e nota\u00e7\u00e3o Big-O</li> <li>Recurs\u00e3o</li> <li>Ponteiros e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria</li> <li>Estuturas lineares: listas, filas e pilhas</li> <li>Algoritmos de busca</li> <li>Algoritmos de ordena\u00e7\u00e3o O(n)</li> <li>Algoritmos em \u00e1rvores bin\u00e1ria</li> <li>Organiza\u00e7\u00e3o de arquivos</li> <li>Aplica\u00e7\u00f5es</li> </ol>"},{"location":"sections/2025.1/EDA1/estruturasLineares/","title":"Estruturas Lineares: Lista, fila e pilha","text":""},{"location":"sections/2025.1/EDA1/estruturasLineares/#listas-encadeadas","title":"Listas encadeadas","text":"<p>Numas lista encadeada, cada elemento aponta para o pr\u00f3ximo, sem que estejam em posi\u00e7oes sequenciais na mem\u00f3ria.</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#1-listas-encadeadas-simples","title":"1. Listas encadeadas simples","text":"<p>Cada elemento aponta apenas para o que vem a seguir. Cada caixinha \u00e9 chamada de n\u00f3 ou c\u00e9lula e \u00e9 implementada da seguinte forma:</p> <pre><code>type def struct celula{\n    int dado;\n    struct celula *prox;\n} celula;\n</code></pre> <p>Implementaremos listas simplesmente encadeadas com n\u00f3 cabe\u00e7a;</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#criacao-da-lista","title":"Cria\u00e7\u00e3o da lista","text":"<pre><code>celula *cria_lista(){\n    celula *le = malloc(sizeof(celula));\n    le -&gt; prox = NULL;\n    return le;\n}\n</code></pre> <p>(*le).dado = 10, \u00e9 a mesma coisa que le -&gt; dado = 10</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#busca","title":"Busca","text":""},{"location":"sections/2025.1/EDA1/estruturasLineares/#busca-iterativa","title":"Busca Iterativa","text":"<pre><code>celula *busca(celula *le, int x){\n    for(celula *ptr = le; ptr != NULL; ptr = ptr -&gt; prox)\n        if(ptr -&gt; dado == x) return ptr;\n    return NULL;\n}\n</code></pre> <p>Fazendo alguns exerc\u00edcios do MOJ, surgiu uma quest\u00e3o de implementar uma fun\u00e7\u00e3o de busca de forma recursiva. Dessa forma:</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#busca-recursiva","title":"Busca Recursiva","text":"<pre><code>celula *busca_rec(celula *le, int x){\n    if (le == NULL) return NULL;\n    if ( le -&gt; prox == x) return le;\n\n    return busca_rec(le-&gt;prox, x);\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#insercao","title":"Inser\u00e7\u00e3o","text":"<pre><code>void insere(celula *ptr, int x){\n    celula *novo = malloc(sizeof(celula));\n    novo -&gt; dado = x;\n    novo -&gt; prox = ptr -&gt; prox;\n    ptr -&gt; prox = novo;\n} // COMPLEXIDADE: O(1)\n</code></pre> <p>Para inserir no come\u00e7o, basta chamar insere com le. Para inserir depois de um elemento y da lista, basta chamar busca e com seu retorno, chamar insere.</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#remocao","title":"Remo\u00e7\u00e3o","text":"<pre><code>int remove(celula *ptr){\n    celula *lixo = ptr -&gt; prox;\n    celula *proxNo = lixo -&gt; prox;\n    int x = lixo -&gt; dado;\n    ptr -&gt; prox = proxNo;\n\n    free(lixo);\n    return x;\n}\n</code></pre> <p>Para remover o primeiro elemento da lista, chama-se remove com le.</p> <p>Agora para exercitar, pense: </p> <ul> <li> <p>Como remover um elemento y?</p> <ul> <li>Estive estudando, e o princ\u00edpio \u00e9. Temos que saber a celula anterior a que queremos saber, e fazer essa anterior apontar para a que ela aponta. Dessa forma:</li> </ul> <p>```c int removeItem(celula le, int x){     for ( celula atual = le; atual != NULL; atual = atual -&gt; prox){         if ( atual -&gt; prox -&gt; dado == x){             celula *to_remove = atual -&gt; prox;</p> <pre><code>        atual -&gt; prox = to_remove -&gt; prox;\n\n        free(to_remove);\n\n        return 1;\n    }\n}\nreturn 0; // 0 se n econtrou\n</code></pre> <p>} ```</p> </li> <li> <p>Como remover o \u00faltimo elemento da lista?</p> <ul> <li> <p>Podemos seguir do mesmo jeito, achamos o \u00faltimo elemento que aponta para NULL, pegamos o antecessor e apontamos para NULL; ```c int removeUltimo(celula *le){     if(le -&gt; prox == NULL) return 0; </p> <p>for (celula *atual = le; atual != NULL; atual = atual -&gt; prox){     if ( atual -&gt; prox -&gt; prox == NULL) {         free(atual-&gt;prox);         atual -&gt; prox = NULL;         return 1;     } } return 0;     }     ```</p> </li> </ul> </li> </ul>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#destroi-lista","title":"Destroi lista","text":"<pre><code>void destroi_lista(celula *le){\n    while(le -&gt; prox != NULL)\n        remove(le);\n    free(le);\n} // COMPLEXIDADE: O(n)\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#pilhas","title":"Pilhas","text":"<p>S\u00e3o estruturas do tipo LIFO (Last-In-Fist-Out). Tem dois jeitos de fazer uma pilha, usando:</p> <ul> <li>Vetores</li> <li>Listas Encadeadas</li> </ul> <p>Usando listas encadeadas \u00e9 praticamente a mesma forma de implementar uma lista. Ent\u00e3o vou implementar uma usando vetores.</p>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#pilhas-com-vetores","title":"Pilhas com Vetores","text":"<pre><code>type def struct {\n    int *dado;\n    int n; // tamanho\n    int topo;\n}pilha\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#criacao-da-pilha","title":"Criacao da pilha","text":"<pre><code>pilha *cria_pilha(int tam){\n    pilha *p = malloc(sizeof(pilha));\n    p -&gt; dado = malloc(tam * sizeof(int));\n    p -&gt; n = tam;\n    p -&gt; topo = 0;\n    return p;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#empilha","title":"Empilha","text":"<pre><code>\n    int empilha(pilha *p, int x){\n        if(p -&gt; topo == p -&gt; n){\n            p -&gt; dado = realloc(p -&gt; dado, 2 * p -&gt; tam * sizeof(int));\n            if(p -&gt; dado == NULL) return 1; // Estouro\n            p -&gt; n *= 2;\n        }\n        p -&gt; dado[p -&gt; topo++] = x;\n        return 0; // bem sucedido\n    } // O(1)\n\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#desempilha","title":"Desempilha","text":"<pre><code>\n    int desempilha(pilha *p, int *y){\n        if(p -&gt; topo == 0) return 1; //erro\n        p -&gt; topo--;\n        *y = p -&gt; dado[p -&gt; topo];\n        return 0;\n    } O(1)\n\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#destroi-pilha","title":"Destroi pilha","text":"<pre><code>\n    void destroi_pilha(pilha *p){\n        free(p-&gt;dado);\n        free(p);\n    }\n\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#fila","title":"Fila","text":"<p>S\u00e3o estruturas do tipo FIFO (First-In-First-Out). Tem dois jeitos de fazer uma fila, usando:</p> <ul> <li>Vetores </li> <li>Lista encadeada</li> </ul>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#por-meio-de-vetores","title":"Por meio de vetores","text":"<p>Vou mostrar a implementa\u00e7\u00e3o via vetor, mas o indicado \u00e9 sempre por lista encadeada para n\u00e3o se preocupar com redimensionamento. Utilizando o conceito de fila circular, para n\u00e3o ficar t\u00e3o simples.</p> <pre><code>type def struct{\n    int *dado;\n    int s, e; // start e end\n    int n; // tamanho\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#criar-fila","title":"Criar fila","text":"<pre><code>fila *cria_fila(int tam){\n    fila *f = malloc(sizeof(fila));\n    f -&gt; dado = malloc(tam * sizeof(int));\n    f -&gt; s = f -&gt; = 0;\n    f -&gt; n = tam;\n    return f;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#insere-na-fila","title":"Insere na Fila","text":"<pre><code>int enfileira(fila *f, int x){\n    if ((f -&gt; e+1)%f -&gt; n == f -&gt; s) if (redimensiona(f)) return 1;\n    f -&gt; dado[f -&gt; e] = x;\n    f -&gt; e = (f -&gt; e+1) % f -&gt; n;\n\n    return 0; // deu certo\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#remove-da-fila","title":"Remove da Fila","text":"<pre><code>int desenfileira(fila *f, int *y){\n    if (f -&gt; e == f -&gt; s) return 1; // vazia\n    *y = f -&gt; dado[f -&gt; s];\n    f -&gt; s = (f -&gt; s+1) % f -&gt; n;\n    return 0; // deu certo\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#por-meio-de-lista-encadeada-circular","title":"Por meio de Lista Encadeada Circular","text":""},{"location":"sections/2025.1/EDA1/estruturasLineares/#definicoes","title":"Defini\u00e7\u00f5es","text":"<pre><code>typedef struct celula {\n    int dado;\n    struct celula *prox;\n}fila;\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#criar-fila_1","title":"Criar fila","text":"<pre><code>fila *cria_fila(){\n    fila *f = malloc(sizeof(fila));\n\n    f -&gt; prox = f; \n\n    return f;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#enfileira","title":"Enfileira","text":"<pre><code>int enfileira(fila **f, int x){\n    fila *novo = malloc(sizeof(fila));\n    novo -&gt; prox = *f -&gt; prox;\n    *f -&gt; prox = novo;\n    *f -&gt; dado = x;\n    *f = novo;\n    return 0;\n}\n</code></pre> <p>Ou, retornaremos um ponteiro</p> <pre><code>fila *enfileira(fila *f, int x){\n    fila *novo = malloc(sizeof(fila));\n    novo -&gt; prox = f -&gt; prox;\n    f -&gt; prox = novo;\n    f -&gt; dado = x;\n    return novo;  \n}\n// Na main, teria que fazer o no cabe\u00e7a mudar\n// fila *f = cria_fila():\n// f = enfileira(f, 10);\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#desinfileira","title":"Desinfileira","text":"<pre><code>int desinfileira(fila *f, int *y){\n    if (f -&gt; prox == f) return 1;\n    *y = f -&gt; prox -&gt; dado;\n    fila *lixo = f-&gt; prox;\n    f -&gt; prox = lixo -&gt; prox;\n\n    free(lixo);\n    return 0;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/estruturasLineares/#destroi-fila","title":"Destr\u00f3i fila","text":"<pre><code>void destroi_fila(fila *f){\n\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/intro/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"sections/2025.1/EDA1/intro/#como-medir-o-desempenho-de-algoritmo","title":"Como medir o desempenho de algoritmo?","text":"<ul> <li>Tempo de execu\u00e7\u00e3o</li> <li>Mem\u00f3ria Entretando, essas duas podem variar e existe um trade off entre elas.</li> <li>Linguagem de programa\u00e7\u00e3o e compilador</li> <li>Quantidade de opera\u00e7\u00f5es<ul> <li>\u00danica que n\u00e3o \u00e9 vari\u00e1vel.</li> </ul> </li> </ul>"},{"location":"sections/2025.1/EDA1/intro/#problema-encontrar-o-maior-valor-de-um-vetor","title":"Problema: Encontrar o maior valor de um vetor.","text":"<pre><code>int main(){\n    int v[10];\n    int maior = v[0]; // Custo de 1 para aloca\u00e7\u00e3o de mem\u00f3ria\n    for(int i = 1; i &lt; 10; i++){ // (1 aloca\u00e7\u00e3o)(n para itera\u00e7\u00e3o)(n-1 para soma de i)\n        if(v[i] &gt; maior){ // n-1 itera\u00e7\u00e3o\n            maior - v[i]; // no pior caso n-1\n        }\n    }\n    printf(\"o maior \u00e9: %d\", maior);\n}\n</code></pre> <p>Portanto, somanto todos os custos -&gt; &lt;= 1 + 1 + n + n - 1 + n - 1 + n - 1 + 1. Ou seja, &lt;= 4n.</p> Tipos Primitivos Modificadores 1B char short 4B int long 4B float unsigned 8B double <ul> <li>long: inteiro de 64 bits. (8B ou 12B)</li> </ul>"},{"location":"sections/2025.1/EDA1/ordenacao/","title":"Algoritmos de Ordena\u00e7\u00e3o","text":""},{"location":"sections/2025.1/EDA1/ordenacao/#1-insercao","title":"1. Inser\u00e7\u00e3o","text":""},{"location":"sections/2025.1/EDA1/ordenacao/#principio","title":"Princ\u00edpio:","text":"<p>\"Inserir\" o i-\u00e9simo elemento na posi\u00e7\u00e3o \"correta\" do subvetor v[0 ... i - 1] </p> <p>Ex.: </p> 0 1 2 3 4 3 -1 7 2 4 <pre><code>void insertion(int *v, int n){\n    for(int i = 1; i &lt; n; i++){\n        for (int j = i; j &gt; 0 &amp;&amp; v[j] &lt; v[j-1]; j--)\n        {\n            troca(&amp;v[j], &amp;v[j-1]);\n        }\n    }\n}\n</code></pre> <p>Complexidade \\(O(n^2)\\) e \\(O(n)\\) para um vetor j\u00e1 ordenado.</p>"},{"location":"sections/2025.1/EDA1/ordenacao/#2-selecao","title":"2. Sele\u00e7\u00e3o","text":""},{"location":"sections/2025.1/EDA1/ordenacao/#principio_1","title":"Princ\u00edpio:","text":"<p>\"Selecionar\" o elemento do subvetor v[i  ... m - 1] e coloca na posi\u00e7\u00e3o i.</p> <p>Ex.:</p> 0 1 2 3 4 2 5 1 0 3 <pre><code>void selection(int *v, int n){\n    for(int i = 0; i &lt; n, i++){\n        int menor = 1;\n        for(int j = i + 1; j &lt; n; j++)\n            if(v[j] &lt; v[menor]) menor = j;\n        troca(&amp;v[i], &amp;v[menor]);\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#3-estabilidade","title":"3. Estabilidade","text":"<p>Dizemos que o algoritmo de ordena\u00e7\u00e3o \u00e9 est\u00e1vel se, ao ordenar, ele preserva a ordem original elementos iguais.</p> <p>Inser\u00e7\u00e3o \u00e9 est\u00e1vel, mas a sele\u00e7\u00e3o n\u00e3o.</p>"},{"location":"sections/2025.1/EDA1/ordenacao/#4-ordenacao-por-intercalacao","title":"4. Ordena\u00e7\u00e3o por Intercala\u00e7\u00e3o","text":"<p>A intercala\u00e7\u00e3o consiste em unir dois conjuntos ordenados em um s\u00f3. Em termos de vetores: Dado um vetor v[e ... d] tal que v[e ... m] e v[m+1 ... d] s\u00e3o subvetores ordenados, para \\(e&lt;=m&lt;=d\\), desejo qie v[0 .. n-1] fique ordenado.</p> <pre><code>void intercala(int *v, int e, int d){\n    int j = e, j = m, k = 0;\n    int *aux = malloc((d - e + 1) * sizeof(int));\n    while(i &lt; m &amp;&amp; j &lt;= d){\n        if(v[i] &lt;= v[j]){\n            aux[k] = v[i]; k++; j++;\n        } else {\n            aux[k] = v[j]; k++; j++;\n        }\n    }\n    while(i&lt;m) aux[k++] = v[i++];\n    while(j&lt;=d) aux[k++] = v[j++];\n\n    for(k = 0; i = e; i &lt;= d; k++; i++)\n        v[i] = aux[k];\n\n} // Complexidade: O(d - e + 1) \n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#5-mergesort","title":"5. MergeSort","text":"<pre><code>void mergesort(int *v, int e, int d){\n    if(e&lt;d){\n        int m = (e + d) / 2;\n        mergesort(v, e, m);\n        mergesort(v, m+1, d);\n        intercala(v, e, m, d);\n    }\n\n} // Complexidade O(n Lg n)\n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#6-quicksort","title":"6. QuickSort","text":"<p>Baseia-se no problema da sepra\u00e7\u00e3o. Dado um vetor v[e ... d], queremos um j tal que: $$  v[e .. j-1] &lt;= v[j] &lt; v[j+1..d] $$</p> <p>Onde \\(v[e .. j-1]\\) e \\(v[j+1..d]\\), podem n\u00e3o estar ordenados.</p> <p>Ex.: Estapas do quicksort</p> 0 1 2 3 4 5 v = 2 -1 0 3 4 1 <p>Onde, 1 \u00e9 o piv\u00f4</p> 0 1 2 3 4 5 v = 0 -1 1 3 4 2 0 1 2 3 4 5 v = 0 -1 1 2 4 3 0 1 2 3 4 5 v = -1 0 1 2 3 4"},{"location":"sections/2025.1/EDA1/ordenacao/#pior-caso","title":"Pior caso","text":"<p>O pior caso sera um vetor ordenado, pois ele n\u00e3o vai conseguir dividir o vetor, pois o piv\u00f4 sempre vai estar no lugar certo.</p> <p>Complexidade: \\(O(n^2)\\)</p>"},{"location":"sections/2025.1/EDA1/ordenacao/#o-algoritmo-da-separacao","title":"O algoritmo da separa\u00e7\u00e3o","text":"e j k d v= &lt;=c &lt;=c &gt;e ? ? ? ? ? <p>Se \\(v[k]&lt;= c\\), troca v[k] com v[j] e incrementa j.</p> <pre><code>int separa(int *v, int e, int d){\n    int c = v[d];\n    int j = e, k = e;\n    while(k &lt; d){\n        if(v[k] &lt;= c){\n            troca(&amp;v[k], &amp;v[j]);\n            j++;\n        }\n    }\n    k++;\n    troca(&amp;v[j], &amp;v[d]);\n    return j;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#algoritmo-quicksort","title":"Algoritmo QuickSort","text":"<pre><code>void quicksort(int *v, int e, int d){\n    if(e &lt; d){\n        int p = separa(v, e, d);\n        quicksort(v, e, p-1);\n        quicksort(v,p+1, d);\n    }\n}\n</code></pre> <p>Complexidade: \\(O(n^2)\\)</p>"},{"location":"sections/2025.1/EDA1/ordenacao/#observaveis","title":"Observ\u00e1veis","text":"<ul> <li>O pior caso do QuickSort \u00e9 quando separa sempre retorna d. Isso pode acontece quando o vetor j\u00e1 esteja ordenado.</li> <li>H\u00e1 uma implementa\u00e7\u00e3o do QuickSort em C, na stdlib.h.</li> </ul> <p><code>void qsort(void *v, int n, int size_memb, int(compara)(void *a, void *b))</code></p> <p>Temos um jeito de melhorar o quicksort, que \u00e9 mudando o piv\u00f4, trocando com a mediana do vetor. Podemos usar uma fun\u00e7\u00e3o pra fazer isso:</p> <pre><code>int mediana3(int e, int m, int d){\n    int a = v[e], b = v[m], c = v[d];\n}\n\nvoid quicksort(int *v, int e, int d){\n    if(e&lt;d){\n        int m = mediana3(e, (e+d)/2, d);\n        troca(&amp;v[m], &amp;v[d]);\n        int p = separa(v, e, d);\n        quicksort(v , e , p-1);\n        quicksort(v, p+1, d);\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#7-quickselect","title":"7. QuickSelect","text":"<p>Problema: encontrar o k-\u00e9simo menor elemento de um vetor v[0 ... n-1], para \\(0 &lt;= k &lt; m\\). </p> <pre><code>void quickselect(int *v, int e, int d, int k){\n    if(e &lt; d){\n        int m = mediana3(e, (e+d)/2, d);\n        troca(&amp;v[m], &amp;v[d]);\n\n        int p = separa(v, e, d);\n\n        if(k &lt; p) quickselect(v, e , p-1, k);\n        if(k &gt; p) quickselect(v, p+1 , d, k);\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/ordenacao/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>O pior caso do QuickSelect \u00e9 o mesmo do QuickSort em termos de inst\u00e2ncia e complexidade.</li> <li>Al\u00e9m de encontrar o k-\u00e9simo menor elemento, o QuickSelect reordena os elementos de v tal que:</li> </ul> \\[ V[0 ... k - 1] &lt;= v[k] &lt; v[k ... n - 1] \\] <p>Isso pode ser muito eficiente para ordenar apenas uma parte do vetor.</p>"},{"location":"sections/2025.1/EDA1/ordenacao/#algoritmo-de-ordenacoes-lineares","title":"Algoritmo de ordena\u00e7\u00f5es Lineares","text":""},{"location":"sections/2025.1/EDA1/ordenacao/#1-contagem","title":"1. Contagem","text":"<p>Premissa: O conjunto a ser ordenado possui apenas n\u00fameros inteiros no intervalo [a,b], com \\(a,b \\in \\mathbb{Z}\\).  L\u00f3gica: Usando um vetor auxiliar de tamanho \\(|b - a| + 1\\), conto a ocorr\u00eancia de cada elemento no vetor e, ao final, exibo os elementos em ordem.</p> <p>Ex.: </p> 0 1 2 3 4 5 6 -3 0 4 -1 -5 5 3 <p>Nesse caso:</p> <p>a = -5, b = 5, Logo |b-a| + 1 = 11</p> <p>O vetor auxiliar:</p> 0 1 2 3 4 5 6 7 8 9 10 1 0 1 0 1 1 0 0 1 1 1 <p>Na hora de printar: </p> 0 1 2 3 4 5 6 -5 -3 -1 0 3 4 5"},{"location":"sections/2025.1/EDA1/ordenacao/#algoritmo","title":"Algoritmo","text":"<pre><code>void contagem(int *v, int n, int a, int b){\n    int tam = b - a;\n    if(tam &lt; 0) tam -= tam;\n    int *aux = calloc(tam + 1, sizeof(int));\n    for(int i = 0; i &lt; n; i++) aux[v[i] - a];\n    for(int i=0, j=0; i&lt;=tam; i++){ // *\n        while(aux[i] &gt; 0){\n            v[j] = i + a; j++; aux--; //**\n        }\n    }\n    free(aux); \n} //COMPLEXIDADE: O(|b-a| + 1)\n</code></pre> <p>Esse c\u00f3digo compensa quando |b-a| + 1 for \\(O(n)\\).</p> <p>Todavia o la\u00e7o() \u00e9 muito r\u00e1pido, pois (*) s\u00f3 \u00e9 feito n vezes. Logo, se h\u00e1 possibilidade de arcar com o custo de mam\u00f3ria o algoritmo \u00e9 interessante.</p>"},{"location":"sections/2025.1/EDA1/ponteiro/","title":"Ponteiros e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria","text":""},{"location":"sections/2025.1/EDA1/ponteiro/#indirecao","title":"Indire\u00e7\u00e3o","text":"<ul> <li>Toda vari\u00e1vel \u00e9 um \"apelido\" para regi\u00e3o da mem\u00f3ria</li> <li>Cada tipo de dados determina o tamanho da regi\u00e3o<ul> <li>char: 1B</li> <li>int: 4B</li> <li>long: 8B</li> <li>float: 4B</li> <li>double: 8B</li> </ul> </li> </ul> <p>OBS.: Os tamanhos podem variar de acordo com a estrutura.</p> endere\u00e7amento espa\u00e7o de mem\u00f3ria 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ... ... <p>Quando declaramos uma vari\u00e1vel, ela \u00e9 alocada na mem\u00f3ria pelo sistema operacional em tempo de execu\u00e7\u00e3o. Chamamos de aloca\u00e7\u00e3o autom\u00e1tica.</p> <p>Ex.: char a; int x</p>"},{"location":"sections/2025.1/EDA1/ponteiro/#definicoes","title":"Defini\u00e7\u00f5es","text":"<ul> <li>Aloca\u00e7\u00e3o: Reserva espa\u00e7o de mem\u00f3ria para a vari\u00e1vel ai entrar no seu escopo.</li> <li>Desaloca\u00e7\u00e3o: O modificador static faz que o espa\u00e7o da vari\u00e1vel n\u00e3o seja disponibilizado durante o tempo de execu\u00e7\u00e3o do problema</li> </ul> <p>Com isso, toda a vari\u00e1vel possui um endere\u00e7o que corresponde ao endere\u00e7o inicial da regi\u00e3o de mem\u00f3ria e que est\u00e1 alocada.</p>"},{"location":"sections/2025.1/EDA1/ponteiro/#ponteiro","title":"Ponteiro","text":"<p>Ponteiro \u00e9 uma classe de vari\u00e1veis que armazenam endere\u00e7os de mem\u00f3ria. </p>"},{"location":"sections/2025.1/EDA1/ponteiro/#exemplo","title":"Exemplo:","text":"<pre><code>int x = 81;\nint *p; // * -&gt; Na declara\u00e7\u00e3o indica que a vari\u00e1vel \u00e9 um ponteiro\np = &amp;x; // Operador un\u00e1rio &amp; chama-se operador de endere\u00e7amento (endere\u00e7o de ...)\n\nprintf(\"x = %d\\n\", *p);\n// L\u00ea-se Conte\u00fado de ...\n\n</code></pre>"},{"location":"sections/2025.1/EDA1/ponteiro/#o-que-aconteceu-na-memoria-neste-exemplo","title":"O que aconteceu na mem\u00f3ria neste exemplo?","text":"<ol> <li>Aloca\u00e7\u00e3o autom\u00e1tica de X.</li> <li>Armazena 81 em x.</li> <li>Aloca\u00e7\u00e3o autom\u00e1tica de p.</li> </ol>"},{"location":"sections/2025.1/EDA1/ponteiro/#importante","title":"IMPORTANTE!","text":"<ul> <li>O tipo de ponteiro n\u00e3o determina seu tamanho, mas sim qual o tamanho da mem\u00f3ria que deve ser manipulada em caso de indire\u00e7\u00e3o.</li> <li>Um ponteiro costuma ter 8 Bytes, mas varia de acordo com a arquitetura/S.O.</li> </ul>"},{"location":"sections/2025.1/EDA1/ponteiro/#aplicacoes-de-ponteitos","title":"Aplica\u00e7\u00f5es de ponteitos","text":""},{"location":"sections/2025.1/EDA1/ponteiro/#1-alocacao-dinamica-de-memoria","title":"1. Aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria","text":"<pre><code>int n;\nscanf(\"%d\", &amp;n);\nint v[n]; // &lt;= ERRADO!!!!!\n\n// JEITO CERTO\n\nint *v;\nv = malloc(n * sifeof(int));\n\nprintf(\"%d\", v[0]);\n\nfree(v); // &lt;= Importante limpar mem\u00f3ria p\u00f3s uso\n\n</code></pre> <p>As fun\u00e7\u00f5es de manipula\u00e7\u00e3o de mem\u00f3ria est\u00e3o na biblioteca stdlib.h.</p> <p>As \"irm\u00e3s\" de malloc s\u00e3o:</p> <ul> <li><code>int *v = calloc(n * sizeof(int))</code><ul> <li>Aloca n blocos de tamanhos sizeof(int) e zera cada bloco.</li> </ul> </li> <li><code>v = realloc(v, n * 2 * sizeof(int))</code><ul> <li>Recebe um ponteiro para uma regi\u00e3o j\u00e1 alocada e altera seu tamanho, retornando um ponteiro para a nova regi\u00e3o.</li> </ul> </li> </ul> <p>Quando uma chamada a alguma das 3 fun\u00e7\u00f5es falhar, o retorno ser\u00e1 zero (ou o processo \u00e9 encerrado pelo S.O)</p> <p>A stdlib.h inclui umas constante chamada NULL que vale zero.</p> <pre><code>int *v = malloc(n * sizeof(int));\nif(v == NULL){\n    printf(\"Erro de aloca\u00e7\u00e3o \\n\");\n    return EXIT_FAILURE;\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/ponteiro/#2-passagem-de-parametro","title":"2. Passagem de Par\u00e2metro","text":"<p>Os par\u00e2metros de fun\u00e7\u00f5es, em C, s\u00e3o passados por c\u00f3pia ou valor.</p> <p>Ex.:</p> <pre><code>void troca(int a, int b){\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main(){\n    int x = 2, y = 5;\n    troca(x, y);\n    printf(\"x = %d, y = %d\", x, y);\n\n    return 0;\n}\n</code></pre> <p>A sa\u00edda sera: x = 2 , y = 5</p> <p>Para fazer uma passagem por refer\u00eancia, passamos para a fun\u00e7\u00e3o o endere\u00e7o de mem\u00f3ria das vari\u00e1veis:</p> <p>Ex.:</p> <pre><code>void troca(int *a, int *b){\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main(){\n    int x = 2, y = 5;\n    troca(x, y);\n    printf(\"x = %d, y = %d\", x, y);\n\n    return 0;\n}\n\n</code></pre> <p>Agora sim a sa\u00edda ser\u00e1: x = 5, y = 2.</p> <p>obs1.: J\u00e1 usamos essa constru\u00e7\u00e3o no Scanf.</p> <p>obs2.: Nesse exemplo, os ponteiros s\u00e3o passados por valor.</p>"},{"location":"sections/2025.1/EDA1/ponteiro/#3-ponteiros-e-vetores","title":"3. Ponteiros e Vetores","text":"<p>Quando declaramos <code>int v[5]</code></p> <ul> <li>Temos um vetor de 5 posi\u00e7\u00f5es (indexadas de 0 a 4).</li> <li>V \u00e9 um ponteiro para o endere\u00e7o incial de um vetor</li> </ul> <p>Deste modo, quando acessamos <code>v[i] = *(v+i)</code>, v[i] \u00e9 <code>*(v + 1 * sizeof(tipo de v))</code>.</p> <p>obs.: v \u00e9 um ponteiro. v[i] \u00e9 uma vari\u00e1vel, abstra\u00e7\u00e3o da aritm\u00e9tica de ponteiros. Por isso, que:</p> <ul> <li><code>Scanf(\"%d\", &amp;v[i]);</code> Usa-se &amp;.</li> </ul> <p>e que:</p> <ul> <li><code>char str[20]; scanf(\"%s\", str);</code> n\u00e3o se usa &amp;.</li> </ul> <p>e, ainda, </p> <ul> <li><code>Scanf(\"%d\", (v+i));</code> Sem &amp; pois v + 1 j\u00e1 \u00e9 um endere\u00e7o de mem\u00f3ria.</li> </ul> <p>Para matrizes, <code>int M[10][10];</code> assim, <code>M[i][j]</code> \u00e9 uma abstra\u00e7\u00e3o para: <code>*(*(m + i) + j)</code>.</p>"},{"location":"sections/2025.1/EDA1/ponteiro/#4-ponteiros-para-funcao","title":"4. Ponteiros para Fun\u00e7\u00e3o","text":"<p>Uma fun\u00e7\u00e3o \u00e9 um vetor de instru\u00e7\u00f5es e seu nome \u00e9 um ponteiro para o inicio desse vetor.</p>"},{"location":"sections/2025.1/EDA1/recursao/","title":"Recurs\u00e3o","text":"<p>\u00c9 uma fun\u00e7\u00e3o que chama-se a si mesma. Os problemas que podem ser resolvidos usando recurs\u00e3o s\u00e3o problemas que possuem Estrutura Recursiva. Um problema \u00e9 recursivo se toda inst\u00e2ncia do problema for composta por inst\u00e2ncias menores do problema.</p> <p>Ex.: Encontrar o maior elemento de um vetor.</p> <p>Estrutura recursiva |--|--|--|--|--|</p> <ol> <li>Divide a inst\u00e2ncia para chegar a uma inst\u00e2ncia menor.</li> <li>Resolve a inst\u00e2ncia menor.</li> <li>Combina as solu\u00e7\u00f5es das menores para resolver a maior.</li> </ol> <p>Portanto, elaborar uma solu\u00e7\u00e3o recursiva envolve: 1. Descobrir o caso trivial de se resolver. 2. Descobrir uma forma de dividir e...  3. Descorbir uma forma de combinar.</p> <p>Utilizando o exemplo: 1. Caso base: Vetor de tamanho 1     - O maior elemento \u00e9 o unico presente O(1) 2. Divis\u00e3o: Reduzir as inst\u00e2ncias em uma unidade 3. Combina\u00e7\u00e3o: O maior ser\u00e1 o maoir entre os elementos descartados e o maior da inst\u00e2ncia menor.</p>"},{"location":"sections/2025.1/EDA1/recursao/#codigo","title":"C\u00f3digo","text":"<pre><code>int maio(int v[], int n){\n    if(n==1) return v[0];\n    else{\n        int m = maior(v, v-1);\n        if(m &gt; v[v-1]) return m;\n        else return v[n-1];\n    }\n}\n</code></pre>"},{"location":"sections/2025.1/EDA1/recursao/#teste-de-mesa","title":"Teste de mesa","text":"<p>V =</p> 0 1 2 3 4 -3 2 -4 -1 7 <ul> <li>7 - maior(v, 5)<ul> <li>2 - maior(v, 4)<ul> <li>2 - maior(v, 3)<ul> <li>2 - maior(v, 2)<ul> <li>-3 - maior(v, 1)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"sections/2025.1/EDA1/recursao/#exemplo-2","title":"Exemplo 2","text":"<p>Calcule \\(a^b\\); com \\(b &gt;= 0\\); recursivamente -&gt; \\(a \\cdot a \\cdot ... \\cdot a; b\\) vezes;</p> <ol> <li>Caso base: \\(a^0 = 1\\)</li> <li>Divis\u00e3o: \\(a^b = a \\cdot a^{b-1}\\)</li> <li>Combina\u00e7\u00e3o = \\(a \\cdot a^{b-1}\\)</li> </ol> <pre><code>int exp(int a, int b){\n    if(b==0) return 1;\n    else return a * exp(a, b-1);\n}\n</code></pre> <ul> <li>Complexidade:</li> <li>Tamanho da \u00e1rvore de recurs\u00e3o</li> <li>Teorema mestre</li> </ul>"},{"location":"sections/2025.1/IHC/ementa/","title":"Ementa Intera\u00e7\u00e3o Humano-Computador","text":"<ol> <li>Fatores Humanos em Software Interativo: Teoria, Princ\u00edpios e Regras B\u00e1sicas</li> <li>Estilos Interativos</li> <li>Linguagens de Comandos</li> <li>Manipula\u00e7\u00e3o Direta</li> <li>Dispositivos de Intera\u00e7\u00e3o</li> <li>Padr\u00f5es para Interface</li> <li>Usabilidade: Defini\u00e7\u00e3o e M\u00e9todos para Avalia\u00e7\u00e3o. A Natureza da Itera\u00e7\u00e3o com o Usu\u00e1rio e Ambiente virtuais</li> </ol>"},{"location":"sections/2025.1/IHC/fhsi/","title":"Fatores humanos em Software Interativo: Teoria, princ\u00edpios e regras b\u00e1sicas.","text":""},{"location":"sections/2025.1/IHC/fhsi/#os-6-principios-do-design","title":"Os 6 princ\u00edpios do Design","text":"<ol> <li>Centrado no ser humano: Consdiera a experi\u00eancia de todas as pessoas afetadas pelo servi\u00e7o.</li> <li>Colaborativo: Stakeholders advindos de contextos e fun\u00e7\u00f5es variados devem se envolver ativamente no processo de desenho do servi\u00e7o.</li> <li>Iterativo: O design de servi\u00e7o \u00e9 uma abordagem explorat\u00f3ria, adaptativa e experimental, que promove a itera\u00e7\u00e3o do prot\u00f3tipo de um servi\u00e7o rumo a sua implementa\u00e7\u00e3o.</li> <li>Sequencial: O servi\u00e7o deve ser vizualizado e regido como uma sequ\u00eancia de a\u00e7\u00f5es inter-realcionadas.</li> <li>Real: As necessidades do usu\u00e1rio devem ser pesquisadas no mundo real, as ideias devem ser prototipadas no mundo real e os valores intang\u00edveis devem ser postos em evid\u00eancia por meio de uma realidadef\u00edsica ou digital.</li> <li>Hol\u00edsitico Devem ser consideradas, de modo sustent\u00e1vel, as necessidades de todos os stakeholders ao longo do servi\u00e7o e itera\u00e7\u00e3o (relacionada a...) com todas as facetas do neg\u00f3cio.</li> </ol>"},{"location":"sections/2025.1/IHC/fhsi/#12-mandamentos-da-pratica-do-ds","title":"12 Mandamentos da pr\u00e1tica do DS","text":"<ol> <li>Chame-o como preferir.</li> <li>Fa\u00e7a os primeiros rescunhos grosseiros.</li> <li>Voc\u00ea \u00e9 um facilitador.</li> <li>N\u00e3o diga, fa\u00e7a.</li> <li>\"Sim, mas ...\" e \"Sim, e...\": Gerar discuss\u00e3o, formas diferentes de ideias.</li> <li>Encontre o probkema certo antes de resolv\u00ea-lo da forma certa.</li> </ol>"},{"location":"sections/2025.1/IHC/fhsi/#ferramentas-basicas-de-ds","title":"Ferramentas B\u00e1sicas de DS","text":"<ol> <li>Personas</li> <li>Dados de Pesquisa</li> <li>Mapas de jornadas</li> <li>Mapa de sistemas</li> <li>Prot\u00f3tipos de servi\u00e7os</li> </ol>"},{"location":"sections/2025.1/SDB2/ementa/","title":"Ementa Sistemas de Banco de Dados 2","text":"<ol> <li>Projeto F\u00edsico de Banco de Dados Relacional.</li> <li>Programa\u00e7\u00e3o no Servidor de Banco de Dados Relacional</li> <li>Alternativas de modelagem conceitual em rela\u00e7\u00e3o ao paradigma ER</li> <li>Tecnologias e modelagens voltadas para dados semiestruturados e n\u00e3o estruturados</li> <li>Arquiteturas e estrat\u00e9gias para grandes volumes de dados</li> </ol>"},{"location":"sections/2025.1/SDB2/pfbdr/","title":"Projeto F\u00edsico de Banco de Dados Relacional","text":"<ul> <li>Em breve...</li> </ul>"},{"location":"sections/2025.1/Testes/BlackBox/","title":"Black Box","text":""},{"location":"sections/2025.1/Testes/BlackBox/#black-box","title":"Black Box","text":"<p>When testing you're limited to a small subset of all possibles inputs, so to weel-select a test case we should have two other properties:</p> <ol> <li>It reduces, by more than a count of one, the number of other test cases that must be developed to achieve some predefined goal.</li> <li> <p>It covers a large set of other possible test cases, that is tell us something about the presence or absence of errors over and above this specific set of input values.</p> </li> <li> <p>To number 1, implies that each test case should invoke as many different input considerations as possible to minimize the total number of test cases necessary.</p> </li> <li>To number 2, implies that you should try to partition the input domain of a program into a finite number of equivalence classes such that you can reasonably assume (but, of course, not be absolutely sure) that a test of a representative value of each class is equivalent to a test of any other value.</li> <li>If a test case did not detect an error, we would expect that no other test cases in the equivalence class would fall within another equivalence class.</li> </ol> <p>So we consider two things, equivalence partitioning and the second is to develop a set of \"interesting\" conditions to be tested.</p>"},{"location":"sections/2025.1/Testes/BlackBox/#equivalence-partitioning","title":"Equivalence Partitioning","text":"<p>Proceeds in two steps:</p> <ol> <li>Identifyign the equivalence classes</li> <li>Defining the test cases</li> </ol> <p></p>"},{"location":"sections/2025.1/Testes/BlackBox/#identifying-the-equivalence-classes","title":"Identifying the Equivalence Classes","text":"<p>They're identified by taking each input condition.(usually a sentence or phrase in the specification) and partitioning it into two or more groups. We can use the figure above to do this.</p> <p>We have two types of equivalence classes, valid equivalence and invalid equivalence. </p> <p>We're paying more attention on invalid or unexpected conditions.</p>"},{"location":"sections/2025.1/Testes/BlackBox/#given-a-inout-or-external-condition","title":"Given a inout or external condition","text":"<p>Follow these guidelines:</p> <ol> <li>If an input condition specifies a range of values (e.g., \u2018\u2018the item count can be from 1 to 999\u2019\u2019), identify one valid equivalence classe(1&lt;item count&lt;999) and two invalid equivalence classes (item count&lt;1 and item count&gt;999).</li> <li>If an input condition specifies the number of values (e.g., \u2018\u2018one through six owners can be listed for the automobile\u2019\u2019), identify one valid equivalence class and two invalid equivalence classes (no owners and more than six owners).</li> <li>If an input condition specifies a set of input values, and there is reason to believe that the program handles each differently (\u2018\u2018type of vehicle must be BUS, TRUCK, TAXICAB, PASSENGER, or MOTORCYCLE\u2019\u2019),identify a valid equivalence class for each and one invalid equivalence class (\u2018\u2018TRAILER,\u2019\u2019 for example).</li> <li>If an input condition specifies a \u2018\u2018must-be\u2019\u2019 situation, such as \u2018\u2018first character of the identifier must be a letter,\u2019\u2019 identify one valid equivalence class (it is a letter) and one invalid equivalence class (it is not a letter).</li> </ol> <p>The reason that individual test cases cover invalid cases is that certain erroneous-input checks mask or supersede other erroneous-input checks. For instance, if the specification states \u2018\u2018enter book type (HARDCOVER, SOFTCOVER, or LOOSE) and amount (1\u2013999),\u2019\u2019 the test case, (XYZ 0), expressing two error conditions (invalid book type and amount) will probably not exercise the check for the amount, since the program may say \u2018\u2018XYZ IS UNKNOWN BOOK TYPE\u2019\u2019 and not bother to examine the remainder of the input.</p> <p></p>"},{"location":"sections/2025.1/Testes/BlackBox/#boundary-value-analysis-analise-de-borda","title":"Boundary Value Analysis (An\u00e1lise de borda)","text":"<p>Boundary conditions are those situations directly on, above, and beneath the edges of input equivalence classes and output equivalence classes. Differs from quivalence partitioning in two respects:</p> <ol> <li>Rather than selecting any element in an equivalence class as being representative, boundary value analysis requires that one or more elements be selected such that each edge of the equivalence class is the subject of a test.</li> <li>Rather than just focusing attention on the input conditions (input space), test cases are also derived by considering the result space (output equivalence classes).</li> </ol> <p>It is difficult to present a \"cookbook\" for boundary value analysis, since requires a degree of creativity and certain amount of specialization towards the problem at hand.</p>"},{"location":"sections/2025.1/Testes/BlackBox/#cause-effect-graphing","title":"Cause-Effect Graphing","text":"<p>One weakness of boundary value analysis and equivalence partitioning is that they do not explore combinations of input circumstances.</p> <ul> <li> <p>If (the program runs out of memory, for example).</p> </li> <li> <p>The specification is divided into workable pieces. This is necessary because cause-effect graphing becomes unwieldy when used on large specifications. For instance, when testing an e-commerce system, a workable piece might be the specification for choosing and verifying a single item placed in a shopping cart. When testing a Web page design, you might test a single menu tree or even a less complex navigation sequence.</p> </li> <li>The causes and effects in the specification are identified. A cause is a distinct input condition or an equivalence class of input conditions. An effect is an output condition or a system transformation (a lingering effect that an input has on the state of the program or system). For instance, if a transaction causes a file or database record to be updated, the alteration is a system transformation; a confirmation message would be an output condition. You identify causes and effects by reading the specification word by word and underlining words or phrases that describe causes and effects. Once identified, each cause and effect is assigned a unique number.</li> <li>The semantic content of the specification is analyzed and transformed into a Boolean graph linking the causes and effects. This is the cause-effect graph.</li> <li>The graph is annotated with constraints describing combinations of causes and/or effects that are impossible because of syntactic or environmental constraints.</li> <li>By methodically tracing state conditions in the graph, you convert the graph into a limited-entry decision table. Each column in the table represents a test case.</li> <li>The columns in the decision table are converted into test cases.</li> </ul>"},{"location":"sections/2025.1/Testes/ementa/","title":"Ementa Testes de Software","text":"<ol> <li>Conceitos B\u00e1sicos</li> <li>T\u00e9cnicas de testes</li> <li>Testes de unidade</li> <li>Testes de Integra\u00e7\u00e3o, Sistema e Aceita\u00e7\u00e3o</li> <li>Desenvolvimento dirigido a testes</li> <li>Testes n\u00e3o funcionais</li> <li>Uso de testes em integra\u00e7\u00e3o cont\u00ednua</li> </ol>"},{"location":"sections/2025.1/Testes/tecnico/","title":"T\u00e9cnicas de teste","text":""},{"location":"sections/2025.2/COMP/brainfuck/","title":"Criando um compilador de BrainFuck para C","text":""},{"location":"sections/2025.2/COMP/brainfuck/#brainfuck","title":"Brainfuck","text":"<pre><code>import sys\n\ndef interpret(source: str):\n    tape = [0] * 10000\n    pos = 0\n    ip = 0\n    jump_points = []\n\n    while ip &lt; len(source):\n        c = source[ip]\n        match c:\n            case \"+\":\n                tape[pos] = (tape[pos] + 1) % 256\n            case \"-\":\n                tape[pos] = (tape[pos] - 1) % 256\n            case \"&gt;\":\n                pos += 1\n            case \"&lt;\":\n                pos -= 1\n                if pos &lt; 0:\n                    raise IndexError(\"Tape position out of bounds\")\n            case \".\":\n                print(chr(tape[pos]), end=\"\")\n            case \",\":\n                tape[pos] = ord(sys.stdin.read(1)) if sys.stdin.isatty() else 0\n            case \"[\" if tape[pos] == 0:\n                ip = skip_loop(source, ip)\n                continue\n            case \"[\":\n                jump_points.append(ip)\n            case \"]\":\n                ip = jump_points.pop()\n                continue\n        ip += 1\n\ndef skip_loop(source: str, ip: int) -&gt; int:\n    open_brackets = 1\n    while open_brackets &gt; 0:\n        ip += 1\n        if ip &gt;= len(source):\n            raise ValueError(\"Unmatched opening bracket\")\n        if source[ip] == \"[\":\n            open_brackets += 1\n        elif source[ip] == \"]\":\n            open_brackets -= 1\n    return ip + 1\n\ndef main():\n    _, filename = sys.argv\n    with open(filename, \"r\") as f:\n        source = f.read()\n    interpret(source)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"sections/2025.2/COMP/brainfuck/#brainfuck-c","title":"Brainfuck C","text":"<pre><code>import sys\n\n\nC_CODE = \"\"\"\n#include &lt;stdio.h&gt;\n\nint main() {\n    char tape[10000];\n    int pos = 0;\n    for (int i = 0; i &lt; 10000; i++) {\n        tape[i] = 0;\n    }\n\n// codigo bf\n    return 0;\n}\n\"\"\"\n\ndef compile(source: str) -&gt; str:\n    def write(line):\n        commands.append(\"    \" + line)\n\n    commands = []\n    open_parens = 0\n    for c in source:\n        match c:\n            case \"+\":\n                write(\"tape[pos]++;\")\n            case \"-\":\n                write(\"tape[pos]--;\")\n            case \"&gt;\":\n                write(\"pos++;\")\n            case \"&lt;\":\n                write(\"pos--;\")\n            case \".\":\n                write(\"putchar(tape[pos]);\")\n            case \",\":\n                write(\"tape[pos] = getchar();\")\n            case \"[\":\n                write(\"while (tape[pos] != 0) {\")\n                open_parens += 1\n            case \"]\":\n                write(\"}\")\n                if open_parens == 0:\n                    raise ValueError(\"Unmatched closing bracket\")\n                open_parens -= 1\n\n    if open_parens != 0:\n        raise ValueError(\"Unmatched opening bracket\")\n\n    c_code = C_CODE.replace(\"// codigo bf\", \"\\n\".join(commands))\n    return c_code\n\n\ndef main():\n    _, filename = sys.argv\n    with open(filename, \"r\") as f:\n        source = f.read()\n    c_code = compile(source)\n    print(c_code)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"sections/2025.2/COMP/json/","title":"Criando um leitor de JSON","text":"<pre><code>from dataclasses import dataclass\nfrom string import ascii_letters, digits\n\ntype JSON = str | int | list[\"JSON\"] | dict[str, \"JSON\"]\n\nSTRING_CHARS = {\n    *ascii_letters,\n    *digits,\n    \" \", \"!\", \"#\", \"$\", \"%\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"_\",\n}\n\ndef read_json(source: str) -&gt; JSON:\n    parser = Parser(source)\n    value = parser.value()\n    if parser.position != len(source):\n        raise ValueError(\"Extra data after JSON value\")\n    return value \n\n@dataclass\nclass Parser:\n    source: str\n    position: int = 0\n\n    def value(self) -&gt; JSON:\n        self.ws()\n        match self.peek():\n            case '[':\n                value = self.array()\n            case '{':\n                value = self.object()\n            case \"t\":\n                self.literal(\"true\")\n                value = True\n            case \"f\":\n                self.literal(\"false\")\n                value = False\n            case \"n\":\n                self.literal(\"null\")\n                value = None\n            case '\"':\n                value = self.string()\n            case c if c in \"0123456789\":\n                value = self.number()\n            case x:\n                raise ValueError(f\"Unexpected character: {x!r}\")\n\n        self.ws()\n        return value\n\n    def array(self) -&gt; list[JSON]:\n        self.read('[')\n        self.ws()\n        items = []\n\n        # Lista vazia\n        if self.peek() == ']':\n            self.position += 1\n            return items\n\n        # Le o primeiro elemento\n        value = self.value()\n        items.append(value)\n\n        # Le os elementos seguintes\n        while self.peek() == ',':\n            self.position += 1\n            value = self.value()\n            items.append(value)\n\n        self.read(']')\n        return items\n\n    def object(self) -&gt; dict[str, JSON]:\n        self.read('{')\n        self.ws()\n        items = {}\n\n        # Objeto vazio\n        if self.peek() == '}':\n            self.position += 1\n            return items\n\n        # Le o primeiro elemento\n        self.ws()\n        key = self.string()\n        self.ws()\n        self.read(':')\n        value = self.value()\n        items[key] = value\n\n        # Le os elementos seguintes\n        while self.peek() == ',':\n            self.position += 1\n            self.ws()\n            key = self.string()\n            self.ws()\n            self.read(':')\n            value = self.value()\n            items[key] = value\n\n        self.read('}')\n        return items\n\n    def string(self) -&gt; str:\n        chars = []\n        self.read('\"')\n        while self.peek() in STRING_CHARS:\n            chars.append(self.peek())\n            self.position += 1\n        self.read('\"')\n        return \"\".join(chars)\n\n    def number(self) -&gt; int:\n        chars = []\n        while self.peek() in \"0123456789\":\n            chars.append(self.peek())\n            self.position += 1\n        text = \"\".join(chars)\n        return int(text)\n\n    def ws(self) -&gt; None:\n        while self.peek() in \" \\t\\n\\r\":\n            self.position += 1\n\n    def peek(self) -&gt; str:\n        if self.position &lt; len(self.source):\n            return self.source[self.position]\n        return \"\\0\"\n\n    def read(self, expected: str) -&gt; None:\n        if self.position &gt;= len(self.source):\n            raise ValueError(\"Unexpected end of input\")\n        if self.source[self.position] != expected:\n            raise ValueError(f\"Expected {expected!r}, got {self.source[self.position]!r}\")\n        self.position += 1\n\n    def literal(self, text: str) -&gt; None:\n        if self.source.startswith(text, self.position):\n            self.position += len(text)\n        else:\n            raise ValueError(f\"Expected {text!r}\")\n\nif __name__ == \"__main__\":\n    import sys\n    from pprint import pprint\n\n    with open(sys.argv[1]) as f:\n        source = f.read()\n    result = read_json(source)\n    print(type(result))\n    pprint(result)\n</code></pre>"},{"location":"sections/2025.2/COMP/lisp/","title":"Interpretador de Lisp","text":"<p>Aqui temos um interpretador de lisp, feito em python e de forma r\u00e1pida e simples. Isto \u00e9, h\u00e1 jeitos melhores de se fazer. </p> <ul> <li>Voc\u00ea pode navegar no reposit\u00f3rio e ver a pasta \"LISP\", onde vai ter os arquivos originais. Reposit\u00f3rio</li> </ul> <pre><code># pyproject.toml\nfrom typing import Any\nfrom dataclasses import dataclass\nimport math\nimport operator\n\ntype AST = list\ntype IR = list | callable | float\n\n\nFUNCTIONS = {\n    \"sqrt\": math.sqrt, \n    \"cos\": math.cos, \n    \"sin\": math.sin, \n    \"*\": operator.mul,\n    \"+\": operator.add,\n    \"-\": operator.sub,\n    \"/\": operator.truediv,\n    \"%\": operator.mod,\n}\n\n@dataclass\nclass Token:\n    text: str\n    kind: str\n    value: Any = None\n\ndef lex(source: str) -&gt; list[Token]:\n    \"\"\"\n    Realiza a an\u00e1lise l\u00e9xica do c\u00f3digo fonte.\n    \"\"\"\n    source = source.replace(\"(\", \" ( \")\n    source = source.replace(\")\", \" ) \")\n    lexemes = source.split()\n    tokens = []\n\n    for substr in lexemes:\n        if substr == \"(\":\n            token = Token(substr, \"LPAR\")\n        elif substr == \")\":\n            token = Token(substr, \"RPAR\")\n        elif substr in FUNCTIONS:\n            impl = FUNCTIONS[substr]\n            token = Token(substr, \"FUNCTION\", impl)\n        else:\n            value = float(substr)\n            token = Token(substr, \"NUMBER\", value)\n        tokens.append(token)\n\n    return tokens\n\n\ndef parse(tokens: list[Token]) -&gt; AST:\n    \"\"\"\n    Realiza a an\u00e1lise sint\u00e1tica do c\u00f3digo.\n    \"\"\"\n    curr = None\n    stack = []\n\n    for token in tokens:\n        if token.kind == \"LPAR\":\n            curr = []\n            stack.append(curr)\n        elif token.kind == \"RPAR\":\n            lst = stack.pop()\n            if not stack:\n                return lst\n            stack[-1].append(lst)\n        else:\n            curr.append(token.value)\n\n    raise RuntimeError\n\n\ndef analysis(ast: AST) -&gt; IR:\n    \"\"\"\n    An\u00e1lise sem\u00e2ntica.\n    \"\"\" \n    ir = ast\n    return ir\n\ndef emit(ir: IR) -&gt; str:\n    \"\"\"\n    Emite c\u00f3digo\n    \"\"\"\n    raise NotImplementedError(\"PARA CASA ;)\")\n\ndef interpret(ir: IR) -&gt; Any:\n    \"\"\"\n    Interpreta uma \u00e1rvore sint\u00e1tica/IR.   \n    \"\"\"\n    if isinstance(ir, float) or callable(ir):\n        return ir\n    elif isinstance(ir, list):\n        func, *args = map(interpret, ir)\n        return func(*args)\n    else:\n        raise RuntimeError(\"Tipo errado\")\n\ndef run(source: str) -&gt; Any:\n    tokens = lex(source)\n    ast = parse(tokens)\n    ir = analysis(ast)\n    value = interpret(ir)\n\n    print(\"=\", value)\n\ndef run_shell():\n    while True:\n        try:\n            source = input(\"lisp&gt; \")\n        except EOFError:\n            break\n        if not source:\n            break\n        run(source)\n\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv) == 2:\n        filename = sys.argv[1]\n        with open(filename) as fd:\n            source = fd.read()\n        run(source)\n    else:\n        run_shell()\n\n</code></pre>"},{"location":"sections/2025.2/COMP/planoEnsino/","title":"Plano de Ensino Compiladores","text":""},{"location":"sections/2025.2/COMP/planoEnsino/#ementa","title":"Ementa","text":"<ul> <li>Introdu\u00e7\u00e3o</li> <li>Organiza\u00e7\u00e3o e estrutura de compiladores e interpretadores.</li> <li>An\u00e1lise l\u00e9xica.</li> <li>Express\u00f5es Regulares.</li> <li>Aut\u00f4matos.</li> <li>An\u00e1lise sint\u00e1tica.</li> <li>Gram\u00e1ticas Regulares e Livres de Contexto</li> <li>Estruturas de Dados e representa\u00e7\u00e3o interna de c\u00f3digo-fonte.</li> <li>An\u00e1lise sem\u00e2ntica.</li> <li>Gera\u00e7\u00e3o de c\u00f3digo.</li> <li>M\u00e1quinas abstratas e ambientes de tempo de execu\u00e7\u00e3o.</li> <li>Compiladores, Interpretadores e Parsers na Engenharia de Software.</li> </ul>"},{"location":"sections/2025.2/COMP/planoEnsino/#horario-das-aulas-e-atendimento","title":"Hor\u00e1rio das aulas e atendimento","text":"<p>Aulas te\u00f3ricas e de exerc\u00edcios: quartas e sextas-feiras \u00e0s 18h ou 20h. Atendimento: quartas-feiras e sextas-feiras \u00e0s 14h no Lappis.</p>"},{"location":"sections/2025.2/COMP/planoEnsino/#criterios-de-avaliacao","title":"Crit\u00e9rios de avalia\u00e7\u00e3o","text":"<p>A avalia\u00e7\u00e3o ser\u00e1 feita com base em 4 tipos de atividades:</p> <ul> <li>3 provas valendo 30% da nota, cada.</li> <li>Prova substitutiva, valendo 30% da nota. A prova substitutiva substitui a menor nota entre as provas.</li> <li>Lista de exerc\u00edcios valendo 10% da nota.</li> <li>Desafios e atividades competitivas, valendo 5% da nota, como pontos extra.</li> </ul>"},{"location":"sections/2025.2/COMP/LOX/venv/lib/python3.13/site-packages/pip-25.2.dist-info/licenses/src/pip/_vendor/idna/LICENSE/","title":"LICENSE","text":"<p>BSD 3-Clause License</p> <p>Copyright (c) 2013-2024, Kim Davies and contributors. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"sections/2025.2/EDA2/arvore/","title":"\u00c1rvore","text":"<p>Uma \u00e1rvore \u00e9 um conjunto de n\u00f3s interligados de tal forma que existe apenas um \u00fanico caminho ente quaisqier dois n\u00f3s da \u00e1rvore. Toda \u00e1rvore \u00e9 dotada de estrutura topol\u00f3gia: Raiz, e rodem dos filhos.</p> <ul> <li>Todo n\u00f3 sem filhos \u00e9 chamado de folha. Dizemos que a altura de um n\u00f3 \u00e9 o tamanho de um caminho (qtde de arestas) \u00e0 folha descendente mais distante.</li> <li>Dizemos que a profundidade de um n\u00f3 \u00e9 a dist\u00e2ncia (tamanho do caminho) \u00e0 raiz da \u00e1rvore.</li> <li>Dizemos que uma \u00e1rvore cujos n\u00f3s possuem no m\u00e1ximo dois filhos \u00e9 uma \u00e1rvore bin\u00e1ria.</li> </ul>"},{"location":"sections/2025.2/EDA2/arvore/#definicao-recursiva","title":"Defini\u00e7\u00e3o recursiva","text":""},{"location":"sections/2025.2/EDA2/arvore/#percursao-numa-ab-arvore-binaria","title":"Percurs\u00e3o numa AB (\u00c1rvore Bin\u00e1ria)","text":"<ol> <li>Percurs\u00e3o em profundidade<ul> <li>Pr\u00e9-ordem</li> <li>Em ordem</li> <li>P\u00f3s-ordem</li> </ul> </li> </ol>"},{"location":"sections/2025.2/EDA2/arvore/#percurso-em-profundidade","title":"Percurso em Profundidade","text":""},{"location":"sections/2025.2/EDA2/arvore/#implementacao","title":"Implementa\u00e7\u00e3o","text":"<p>Tipo abstrado de dados (TAD)</p> <p></p> <p>C\u00f3digo em C, mas a estrutura \u00e9 assim em outras linguagens tambem.</p> <pre><code>typedef struct celula {\n    int dado;\n    struct celula *esq, *dir;\n}celula;\n\ncelula *cria_arvore(int x){\n    celula *raiz = malloc(sizeof(celula));\n    raiz -&gt; esq = NULL;\n    raiz -&gt; dir = NULL;\n    raiz -&gt; dado = x;\n\n    return raiz;\n}\n\ncelula *preOrdem(celula *raiz){\n    if(raiz != NULL){\n        printf(\"%d \", raiz -&gt; dado);\n        preOrdem(raiz-&gt; esq);\n        preOrdem(raiz-&gt; dir);\n    }\n}\n\ncelula *preOrdemInte(celula *raiz){ // De forma iterativa\n    pilha *p = cria_pilha();\n    empilha(p, raiz);\n    while(!pilha_vazia(p)){\n        raiz = desempilha(p);\n        if(raiz -&gt; dir != NULL) empilha(p, raiz -&gt; dado);\n        if(raiz -&gt; esq != NULL) empilha(p, raiz -&gt; dado);\n        printf(\"%d \", raiz -&gt; dado);\n    }\n}\n</code></pre> <p>Como encontrar a altura de uma \u00e1rvore?</p> <pre><code>int altura (celula *raiz){\n    if (raiz != NULL){\n        int he = altura(raiz -&gt; esq);\n        int hd = altura(raiz -&gt; dir);\n\n        if(he &gt; hd) return he + 1;\n        else return hd + 1;\n    }\n    else return 1;\n}\n</code></pre>"},{"location":"sections/2025.2/EDA2/arvore/#arvore-binaria-de-busca-abb","title":"\u00c1rvore Bin\u00e1ria de Busca (ABB)","text":"<p>Uma ABB \u00e9 uma \u00e1rvore bin\u00e1ria tal que, para todo n\u00f3 x: \\(e \\leq x \\leq d\\). Para qualquer e pertencente \u00e0 sub\u00e1rvore esquerda de x e qualquer pertence a sub\u00e1rvore diretira de x.</p>"},{"location":"sections/2025.2/EDA2/arvore/#busca-arvore-binaria","title":"Busca \u00c1rvore Binaria","text":"<pre><code>celula *busca(celula *raiz, int x){\n    if(raiz != NULL){\n        if(raiz -&gt; dado &gt; x){\n            return busca(raiz -&gt; esq, x);\n        }else if (raiz -&gt; dado &lt; x){\n            return busca(raiz -&gt; dir, x);\n        }\n    }\n    return raiz;\n}\n\ncelula *buscaInt(celula *raiz, int x){ // de forma interativa\n    while(raiz != NULL &amp;&amp; raiz -&gt; dado != x){\n        if(x &lt; raiz -&gt; dado) raiz = raiz -&gt; esq;\n        else raiz = raiz -&gt; dir;\n    }\n    return raiz;\n}\n</code></pre>"},{"location":"sections/2025.2/EDA2/planoEnsino/","title":"Plano de Ensino EDA 2","text":"<p>Plano de ensino: Atualizado em: 19/08/2025.</p> <p>Materiais e atualiza\u00e7\u00f5es da mat\u00e9ria em: Site do John</p>"},{"location":"sections/2025.2/EDA2/planoEnsino/#provas-teoricas","title":"Provas Te\u00f3ricas","text":"<ul> <li>30/09/25</li> <li>27/11/25</li> <li>09/12/25 &lt;- Substitutiva</li> </ul>"},{"location":"sections/2025.2/EDA2/planoEnsino/#provas-praticas","title":"Provas Pr\u00e1ticas","text":"<ul> <li>02/12/25 (Grupo 1)</li> <li>04/12/25 (Grupo 2)</li> </ul> <p>Seu navegador n\u00e3o suporta iframes. Voc\u00ea pode clicar aqui para baixar o PDF.</p>"},{"location":"sections/2025.2/FSO/conceitosIniciais/","title":"Conceitos iniciais para FSO","text":"<p>Portanto a defini\u00e7\u00e3o de Sistema Operacional mais correta, seria aquele que roda somente em modo protegido. Esse modo protegido \u00e9 onde somente o sistema consegue executar comandos por exemplo de grava\u00e7\u00e3o em disco.</p>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#maquina-estendida-ou-abstrada","title":"Maquina Estendida ou Abstrada","text":"<p>Programar, gravar em diferentes tipos de discos \u00e9 MUITO complicado. Portanto, os sistema cria essa m\u00e1quina abstrata de forma que facilita bastante, por exemplo, tranforma o disco em arquivos, memoria ram em endere\u00e7o etc.</p>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#gerenciador-de-recursos-ram","title":"Gerenciador de Recursos (RAM)","text":"<ul> <li> <p>Aloca\u00e7\u00e3o -&gt; <code>malloc</code></p> </li> <li> <p>Libera\u00e7\u00e3o -&gt; <code>free</code></p> </li> <li> <p>Prote\u00e7\u00e3o -&gt; Estudaremos a fundo posteriormente.</p> </li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#geracoes-de-computadores","title":"Gera\u00e7\u00f5es de Computadores","text":"<p>Ao total temos 5 gera\u00e7\u00f5es, estamos vivendo a quarta e a quinta.</p>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#primeira-geracao-de-computadores-1945-1955","title":"Primeira Gera\u00e7\u00e3o de Computadores (1945 - 1955)","text":"<p>Computador criado por Alan Turing durante a segunda guerra mundial, onde funcionava com v\u00e1lvulas (300 v\u00e1lvulas)</p> <ul> <li>Toda programa\u00e7\u00e3o era em linguaguem de m\u00e1quina ou diretamente nos circuitos</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#segunda-geraca-de-computadores-1955-1965","title":"Segunda Gera\u00e7\u00e3 de Computadores (1955 - 1965)","text":"<ul> <li>Tivemos a substitui\u00e7\u00e3o das v\u00e1lvulas por transistores, como \u00e9 at\u00e9 hoje, por\u00e9m com evolu\u00e7\u00f5es.</li> <li>Primeira vez que houve diferen\u00e7a de pap\u00e9is, como, construtores, programadores etc...</li> <li>Execu\u00e7\u00e3o de tarefas por meio de furo em cart\u00f5es</li> <li>Observou-se que perdia muito tempo com essa leitura e impress\u00e3o em cart\u00f5es e com a locomo\u00e7\u00e3o dentro da sala, devido ao tamanho enorme dos computadores.</li> <li>Aqui surgiu um conceito muito importante, utilizado at\u00e9 hoje, o conceito de BATCH, sistemas em lote, utilizado em super computadores atualmente.</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#terceira-geracao-de-computadores-1965-1980","title":"Terceira Gera\u00e7\u00e3o de Computadores (1965 - 1980)","text":"<ul> <li>Computadores orientados a caracteres</li> <li>Grandes computadores eram orientados a palavras (ocupavam salas inteiras)</li> <li>IBM inovou com o System/360, com m\u00e1quinas que possuiam software compativ\u00e9is</li> <li>Introduziram um conceito fundamental a Multiprograma\u00e7\u00e3o</li> <li>Conteito de Spooling tamb\u00e9m veio, sendo a t\u00e9cnica que permite acesso a dispositivos muitos lentos, armazenando temporariamente em uma mem\u00f3ria secund\u00e1ria. (T\u00e9cnica usada em impressoras at\u00e9 hoje)</li> <li>Timesharing Usu\u00e1rios poderiam compartilhar a CPU e recursos, cada um deles com direito de usar uma fatia de tempo, usado ate hoje, com a defini\u00e7\u00e3o de 100ms de fatia de tempo</li> <li>MULTICS -&gt; Pai dos sistemas operacionais de hoje</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#quarta-geracao-de-computadores-1980-atual","title":"Quarta Gera\u00e7\u00e3o de Computadores (1980 - ATUAL)","text":"<ul> <li>Desenvolvimento em larga escala (LSI)</li> <li>Houve Populariza\u00e7\u00e3o de computadores pessoais</li> <li>IBM no mercado de microcomputadores</li> <li>Intel surge como grande refer\u00eancia como fabricante de processadores</li> <li>Primeiras interfaces gr\u00e1ficas, como Windows</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#quinta-geracao-de-computadores-2010-atual","title":"Quinta Gera\u00e7\u00e3o de Computadores (2010 - ATUAL)","text":"<ul> <li>NOKIA surge como fabricante, de forma muito influente</li> <li>Apple e Google dominam os smartphones</li> <li>Conceitos em SO nao mudaram com essa gera\u00e7\u00e3o</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#classificacao-de-sistemas-operacionais","title":"Classifica\u00e7\u00e3o de Sistemas Operacionais","text":"<ul> <li>Sistemas Monoprogram\u00e1veis</li> <li>Sistemas Multiprogram\u00e1veis</li> <li>Sistemas com M\u00faltiplos Processadores</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#monoprogramaveis","title":"Monoprogram\u00e1veis","text":"<ul> <li>Voltado \u00e0 execu\u00e7\u00e3o de um \u00fanico programa</li> <li>Raiz nos computadores dos anos 60</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#multiprogramaveis","title":"Multiprogram\u00e1veis","text":"<ul> <li>Permite recursos computacionais sejam compartilhados entre v\u00e1rios usu\u00e1rios e dispositivos.</li> </ul> <p>Ent\u00e3o surge alguns sistemas para apoiar, sendo eles.</p> <ul> <li>Sistemas Batch, onde se caracteriza por n\u00e3o exigir intera\u00e7\u00e3o com usu\u00e1rio</li> <li>Sistemas de Tempo, Caracterizado pela ger\u00eancia de processos</li> <li>Sistemas em Tempo Real, Como por exemplo de Controle \u00c1ereo</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#multiplos-processadores","title":"M\u00faltiplos Processadores","text":"<ul> <li>2 ou mais processadores interligados</li> <li>V\u00e1rios programas rodando ao mesmo tempo</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#sistemas-operacionais-usuais","title":"Sistemas Operacionais Usuais","text":"<ul> <li>S.O Computadores pessoais</li> <li>S.O de Servidores</li> <li>S.O de Embarcados</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#so-computadores-pessoais","title":"S.O Computadores Pessoais","text":"<ul> <li>Voltados a uso simult\u00e2neo de apenas 1 usu\u00e1rio por vez</li> <li>Windows, Linux: Ubuntu, Fedora</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#so-de-servidores","title":"S.O de Servidores","text":"<ul> <li>Objetivo \u00e9 servir o maior n\u00famero de usu\u00e1rios ao mesmo tempo</li> <li>Windows Server, Linux: CentOS, Red Hat</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#so-de-embarcados","title":"S.O de Embarcados","text":"<ul> <li>Voltados para dispositivos que n\u00e3o aparentam ser um computador (TV, Micro-Ondas, Celulares, Smartphones)</li> <li>PalmOS, Windows CE, Android, IOS, Windows Phone</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#estutura-de-sistemas-operacionais","title":"Estutura de Sistemas Operacionais","text":"<ul> <li>Sistemas Monol\u00edticos</li> <li>Sisemas em Camadas</li> <li>Micro-Kernel</li> <li>M\u00e1quinas Virtuais</li> <li>Exo-Kernel</li> <li>Conteiners</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#sistemas-monoliticos","title":"Sistemas Monol\u00edticos","text":"<ul> <li>Organiza\u00e7\u00e3o de SO mais comum</li> <li>S.O roda em modo protegido, o resto em modo usu\u00e1rio</li> <li>Melhor organiza\u00e7\u00e3o para tempo de resposta</li> <li>Todos os procedimentos do n\u00facleo s\u00e3o vis\u00edveis a todos os outros</li> <li>Necessitam de \"M\u00f3dulos de Kernel\", dados que s\u00e3o inseridos pelo ROOT no Kernel</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#sisemas-em-camadas","title":"Sisemas em Camadas","text":"<ul> <li>Organizado em camadas funcionais</li> <li>Cada camada faz chamada a camada inferior </li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#micro-kernel","title":"Micro-Kernel","text":"<ul> <li>Maior parte do SO, implementada a n\u00edvel de usu\u00e1rio (processos clientes)</li> <li>Falhas em um servidor de arquivos n\u00e3o afeta o kernel</li> <li>Alta adaptabilidade a sistemas distribu\u00eddos</li> <li>Dif\u00edcil implementa\u00e7\u00e3o, mas relativa popularidade no meio</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#maquinas-virtuais","title":"M\u00e1quinas Virtuais","text":"<ul> <li>Os sistemas operacionais estruturados como m\u00e1quinas virtuais possuem, no mais baixo n\u00edvel, um monitor de m\u00e1quina virtual, inclusive \u00e9 feito via Hardware.</li> <li>Em cima do monitor, v\u00e1rias m\u00e1quinas virtuais podem ser utilizadas</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#exo-kernel","title":"Exo-Kernel","text":"<ul> <li>Uma outra estrat\u00e9gia \u00e9 dividir: uma m\u00e1quina virtual recebe blocos de disco de 0 a 1023 e a outra de 1023 a 2047</li> <li>Desta forma, inserimos um software em modo protegido que apenas garante que os recursos s\u00e3o divididos entre os usu\u00e1rios</li> <li>Exp\u00f5e o hardware \u00e0s aplica\u00e7\u00f5es / ao espa\u00e7o de usu\u00e1rio</li> </ul>"},{"location":"sections/2025.2/FSO/conceitosIniciais/#conteiners","title":"Conteiners","text":"<ul> <li>Um concorrente das m\u00e1quinas virtuais s\u00e3o os cont\u00eaineres (Ex: Docker, Podman).</li> <li>Frequentemente, utiliza-se m\u00e1quinas virtuais para isolar as aplica\u00e7\u00f5es em execu\u00e7\u00e3o na mesma m\u00e1quina</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/","title":"Processos","text":""},{"location":"sections/2025.2/FSO/modulo2/#modelo-de-processo","title":"Modelo de processo","text":"<ul> <li> <p>Conceito: \u00c9 um programa em execu\u00e7\u00e3o acompanhando de valores de tempo de execu\u00e7\u00e3o</p> </li> <li> <p>Processo:</p> <ul> <li>C\u00f3digo execut\u00e1vel</li> <li>Valores de vari\u00e1veis locais</li> <li>Registradores</li> <li>Contador de programa (indica a pr\u00f3xima tarefa a ser executada)</li> </ul> </li> <li> <p>Diferen\u00e7a de processo e programa: Programa \u00e9 receita de bolo, processo \u00e9 o ato de fazer o bolo.</p> <ul> <li>Programa \u00e9 uma s\u00e9rie de passos a ser executado</li> <li>Processo \u00e9 a execu\u00e7\u00e3o desses passos</li> </ul> </li> <li> <p>Um processo pode ser dividido em: Ambiente e Execu\u00e7\u00e3o</p> </li> <li> <p>Machado e Maia dividem em 3 partes, Espa\u00e7o de endere\u00e7amento, contexto de software e contexto de hardware:</p> <ul> <li>Execu\u00e7\u00e3o: Contexto de Hardware</li> <li>Ambiente: Espa\u00e7o de endere\u00e7amento + Contexto de software</li> </ul> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#classificacao-de-processo","title":"Classifica\u00e7\u00e3o de processo","text":"<p>Classifica\u00e7\u00e3o dos modelos de processos quanto ao custo de troca de contextos e de manuten\u00e7\u00e3o</p> <ul> <li>Heavyweight (Processo tradicional)</li> <li>Lightwheight (threads)</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#heavyweight-processo-tradicional","title":"Heavyweight (Processo Tradicional)","text":"<ul> <li>Processo composto tanto pelo ambiente como pela execu\u00e7\u00e3o</li> <li>Cada processo possui um \u00fanico fluxo de controle (contador de programa) e roda de forma independente</li> <li>Em um determinado instante, h\u00e1 v\u00e1rios processos ativos ao mesmo tempo, o processador \u00e9 chaveado entre diversos processos</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#lightwheight-threads","title":"Lightwheight (threads)","text":""},{"location":"sections/2025.2/FSO/modulo2/#criacao-de-processos","title":"Cria\u00e7\u00e3o de processos","text":"<ul> <li>Sistemas de um \u00fanico prop\u00f3sito possuem um esquema mais simples e previs\u00edvel de processos em execu\u00e7\u00e3o</li> <li>Os processos s\u00e3o criados:<ul> <li>\u00cdnicio do sistema</li> <li>Execu\u00e7\u00e3o de uma chamada ao sistema de cria\u00e7\u00e3o de processo em execu\u00e7\u00e3o</li> <li>Requisi\u00e7\u00e3o do usu\u00e1rio</li> <li>\u00cdnicio de um job de lote</li> </ul> </li> <li>Alguns executam em primeiro plano e interagem com usu\u00e1rios</li> <li>Outros executam em segundo plano: chamados de daemons</li> <li>Normalmente os processos s\u00e3o criados por outro.</li> <li>Em alguns sistemas, \u00e9 poss\u00edvel listar o ppid (parent pid)</li> <li>Todos os processos s\u00e3o filhos ou descendentes do processo init</li> <li>Windows n\u00e3o apresenta hierarquia de processos</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#hierarquia-da-arvore","title":"Hierarquia da \u00e1rvore","text":""},{"location":"sections/2025.2/FSO/modulo2/#condicoes-de-termino-de-processo","title":"Condi\u00e7oes de t\u00e9rmino de processo","text":"<ul> <li>S\u00e1ida normal (volunt\u00e1ria)</li> <li>Sa\u00edda por erro (volunt\u00e1ria)</li> <li>Erro fatal (involunt\u00e1rio)</li> <li>Cancelamento por outro processo (involunt\u00e1rio)</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#estados-de-processos","title":"Estados de processos","text":"<ul> <li>Apesar de processos serem autossuficientes, muitas vezes necessitam acessar recursos ou comunicar com um processo</li> <li> <p>Quando um processo espera um evento, dizemos que esta bloqueado</p> <ul> <li>Leitura em disco</li> <li>Leitura de rede</li> <li>Esperando entrada do usu\u00e1rio</li> </ul> </li> <li> <p>Os processos podem estar:</p> <ul> <li>Rodando</li> <li>Bloqueado</li> <li>Pronto</li> </ul> </li> </ul> <p></p> <ul> <li>(1) O processo bloqueia-se aguardando uma entrada</li> <li>(2) O evento aguardado pelo processo ocorreu, pode-se iniciar a executar.</li> <li>(3) O tempo de posse do processador esgotou-se</li> <li>(4) O processo \u00e9 escolhido pelo escalonador para executar</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#cpu-bound-e-io-bound","title":"CPU Bound e I/O Bound","text":"<ul> <li>CPU Bound possuem maior afinidade com o procesasdor, e passam a maior parte do tempo em estado rodando, j\u00e1 o I/O Bound possuem afinidade a entrada e sa\u00edda, passam a maior parte do tempo em bloquado.</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#implementacao-de-processos","title":"Implementa\u00e7\u00e3o de processos","text":"<ul> <li>TROCA DE CONTEXTO : Opera\u00e7\u00e3o b\u00e1sica da multiprograma\u00e7\u00e3o, \u00e9 uma opera\u00e7\u00e3o de salvamento dos registradores de um processo, para posteriormente restaurar esses regsitradroes, para que esse processo continue a execu\u00e7\u00e3o como se n\u00e3o tivesse parado</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#escalonamento-de-processos","title":"Escalonamento de Processos","text":"<p>O algortimo de escalonameto \u00e9 o que vai definir qual processo vai rodar e por quanto tempo.</p> <ul> <li>A parte do S.O que faz isso \u00e9 chamado de escalonador</li> </ul> <p></p> <p>Da\u00ed surge a multiprograma\u00e7\u00e3o. Os escalonadores podem ser classificados em:</p> <p>Preemptivos: Quando faz a suspens\u00e3o temporaria de um processo, quando possui a capacidade de tirar a for\u00e7a da CPU.  N\u00e3o-Preemptivos:  Quando o processo chega a CPU, ele executa at\u00e9 o fim, n\u00e3o possui a capacidade de tirar a for\u00e7a da CPU. </p> <ul> <li>Cada processo possui um tempo limitado no processador (time-slice)</li> <li>Os escalonadores n\u00e3o-preemptivos s\u00e3o de projetos mais simples, n\u00e3o confi\u00e1veis pois podem abusar do tempo limite da CPU. Isso viola bons crit\u00e9rios de um bom escalonador, justi\u00e7a, tempo, etc.</li> <li>Escalonadores preemptivos asseguram um uso mais balanceado da CPU, por isso, s\u00e3o usados em maioria pelos S.O.</li> <li>Tais projetos podem possuir defici\u00eancia em processos concorrentes, devido a complexidade.</li> </ul> <p>Ao projetar um escalonador deve-se levar em considera\u00e7\u00e3o:</p> <ul> <li>Justi\u00e7a: Um bom escalondaro deve ser justo, todos os processos devem ter uma chance justa de usar o processador</li> <li>Efici\u00eancia: Quando houver um trabalho a fazer o processador deve estar ocupado</li> <li>Minimizar o tempo de resposta: Reduzir o tempo dos usu\u00e1rios interativos, quando se h\u00e1 diferente tipos de processos rodando na m\u00e1quina.</li> <li>Minimizar o turnaround: Reduzir o tempo de processo at\u00e9 o seu t\u00e9rmino. Soma de tempo de espera por recursos.</li> <li>Minimizar tempo de espera: Visa minimizar o tempo de esepra pela CPU</li> <li>Maximisar throughtput: Maximizar o n\u00famero de tarefas executadas por uma unidade de tempo</li> </ul> <p>N\u00e3o \u00e9 poss\u00edvel atingir todos esses crit\u00e9rios com maestria em um algoritmo, \u00e9 necess\u00e1rio uma lista de prioridade.</p> <ul> <li>Algoritmos cl\u00e1ssicos de escalonamento:<ul> <li>Fist Come First Server</li> <li>Round-Robin: Altern\u00e2ncia circular, cada um vai usar um pouco</li> <li>Prioridades</li> <li>Shortest Job First</li> </ul> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#first-come-first-served","title":"First Come First Served","text":"<p>O processo obtido pela CPU de acordo com a ordem de chegada, \u00e9 do tipo n\u00e3o-preemptivos, assim o processo obtem a CPU por um tempo inderteminado. </p> <ul> <li>Vantagens: <ul> <li>Simples de implementar</li> <li>Algoritmo eficiente, CPU sempre utilizada</li> </ul> </li> <li> <p>Desvantagens:</p> <ul> <li>Impossiblidade de prever quando um processo vai iniciar</li> <li>Tempo m\u00e9dio de processo n\u00e3o \u00e9 respeitado</li> <li>Tempo de espera = Tempo de servi\u00e7o - Tempo de chegada</li> </ul> </li> <li> <p>Justi\u00e7a: N\u00e3o. Um processo pode monopolizar</p> </li> <li>Efici\u00eancia: OK. A CPU sempre \u00e9 utilizada, se existe trabalho</li> <li>Minimizar o tempo de resposta: N\u00e3o. Caso um processo monopolize</li> <li>Minimizar o turnaround: Tarefas longas sendo executadas primeiro, aumenta turnaround (Ver exemplo do SJF a frente)</li> <li>Minimizar waiting time: O tempo de espera n\u00e3o \u00e9 considerado durante o escalonamento</li> <li>Maximizar throughtput: Se a primeira tarefa for longa, o tempo de t\u00e9rmino fica alta</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#round-robin-alternancia-circular-cada-um-vai-usar-um-pouco","title":"Round-Robin: Altern\u00e2ncia circular, cada um vai usar um pouco","text":"<p>Cada processo tem o direito de usar o processador por um intervalo de tempo pre-definido.</p> <ul> <li>\u00c9 uma dificuldade escolher o tempo do quantum, o tempo de execu\u00e7\u00e3o, pois devo esperar um tempo maior que o tempo da troca de contexto, o tempo de resposta desejado. </li> <li>O tempo de quantum padr\u00e3o \u00e9 de 100ms</li> <li>Quantum muito longo, se torna um FCFS</li> <li>Quantum muito curto, perde v\u00e1rios requisitos, por exemplo efici\u00eacia</li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#prioridades","title":"Prioridades","text":"<p>Baseia-se no fato que alguns processos s\u00e3o priorit\u00e1rios e devem ser executados antes dos outros. Muito importante em Sistemas operacionais em tempo real. Cada processo \u00e9 atribuido uma prioridade. - Podem ser atribuidas de 2 formas:     - Est\u00e1tica: Processos s\u00e3o divididos em classes e a cada classe \u00e9 atribuida uma prioridade, a cada prioridade existe uma fila de prontos associadas     - Din\u00e2mica: O sistema analisa o comportamento dos processos e atribui prioridades favorecendo um certo tipo de comportamento. Processos I/O devem possui uma prioridade alta.         - Prioridade din\u00e2mica: 1/f, onde f \u00e9 a fra\u00e7\u00e3o do quantum de tempo de usada na \u00faltima rodada do processo</p>"},{"location":"sections/2025.2/FSO/modulo2/#shortest-job-first","title":"Shortest Job First","text":"<p>Algoritmo projetado para sistemas em lote, com objetivo de reduzir o tempo de turnaround (tempo de lan\u00e7amento do processo at\u00e9 seu t\u00e9rmino). Entretando, requer que o tempo de execu\u00e7\u00e3o de um processo seja conhecido antes de seu in\u00edcio.</p> <ul> <li> <p>Possui aplica\u00e7\u00e3o para sistemas interativos</p> </li> <li> <p>Desvantagens:</p> <ul> <li>Como determinar o tempo de execu\u00e7\u00e3o do comando</li> <li>Probelma da parada \u00e9 indecid\u00edvel</li> <li>Necess\u00e1rio combinar t\u00e9cnincas para estimar valores baseados em execu\u00e7\u00f5es anteriores (aning)</li> </ul> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo2/#escalonamento-em-dois-niveis","title":"Escalonamento em dois n\u00edveis","text":"<p>Quando quero usar dois casos de escalonamento, um caso t\u00edpico de escalomanento em dois n\u00edveis \u00e9 o a;goritmo que considera tanto os processos que est\u00e3o em mem\u00f3ria como os processos que est\u00e3o em disco</p>"},{"location":"sections/2025.2/FSO/modulo3/","title":"Threads","text":"<ul> <li>Threads separam conceitos de agrupamento de recursos e execu\u00e7\u00e3o.</li> <li>Processos agrupam recusos</li> <li>Threads s\u00e3o escalonadas para execu\u00e7\u00e3o</li> <li>Permitem que m\u00faltiplas execu\u00e7\u00f5es ocorram no mesmo ambiente</li> <li>Devido a maior simplicidade de escalonamento s\u00e3o chamadas de \"Processos leves\"</li> <li>No Multithread, a entidade processo \u00e9 dividida em processo e thread</li> <li>Thread correspondeo ao estado de execu\u00e7\u00e3o</li> <li>No modelo mutlithread existem duas entidade na tabela de processo</li> <li>Threads compartilham as mesma var\u00e1veis globais</li> <li>A prote\u00e7\u00e3o dos threads \u00e9 de responsabilidade do programador</li> <li>A pilha \u00e9 uma estrutura em mem\u00f3ria, porem cada thread possui sua pr\u00f3pria pilha e n\u00e3o compartilha esses dados com outras threads</li> <li>As threads chamam procedimentos diferentes em tempos diferentes</li> <li>Chamadas de controle de threads:<ul> <li>thread_create: Cria uma thread nova, passando uma fun\u00e7\u00e3o como argumentos para iniciar a execu\u00e7\u00e3o</li> <li>thread_exit: Termina a thread em execu\u00e7\u00e3o</li> <li>thread_yield: Permite que uma thread desista voluntariamente da CPU</li> </ul> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#por-que-utilizar-multiplas-threads","title":"Por que utilizar m\u00faltiplas threads?","text":"<ul> <li>Pelo mesmo motivo que processos concorrentes s\u00e3o melhores que sem concorr\u00eancia</li> <li>Threads possuem troca de contexto mais leve que processos</li> <li>Procemos dividir o programa caso exista muitas chamadas blocantes, se as chamadas blocantes forem de diversas fontes melhora-se o tempo</li> <li>Para explorar melhor os recursos da m\u00e1quina</li> <li>A intel fez uma campanha avisando que a tend\u00eancia \u00e9 aumentar o n\u00famero de n\u00facleos, n\u00e3o a velocidade deles</li> <li>Threads s\u00e3o mais f\u00e1ceis de cirar e destruir que processos, pois s\u00f3 precisa de uma \u00e1rea alocada</li> <li>Em alguns sistemas, criar uma thread \u00e9 100 vezes mais r\u00e1pido que criar um processo</li> <li>\u00c9 um modelo de programa\u00e7\u00e3o mais simples</li> <li>Quando um programa deve tratar dados de diversas fontes:</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#a-arte-de-multiprogramar","title":"A arte de Multiprogramar","text":"<p>Porem h\u00e1 quest\u00f5es que foram levantadas:</p> <ul> <li>Fork(): Quando o pai cria o processo filho, ele deve conter o mesmo tanto de threads que o pai ou apenas um? APENAS UMA THREAD</li> <li>Escalonamento: Uma thread estiver bloqueada esperando dados do teclado, ele deveria ser bloqueado?</li> <li>O compartilhamento de dados pode causar muitos problemas<ul> <li>O que acontece quando uma thread fecha um arquivo que outra thread est\u00e1 lendo? -&lt;</li> </ul> </li> <li>Alguns desafios s\u00e3o solucionados com boas pr\u00e1ticas de programa\u00e7\u00e3o</li> </ul> <p>Multithreading Programming -&gt; Expectation vs Reality</p> <p></p>"},{"location":"sections/2025.2/FSO/modulo3/#implementacao-de-threads","title":"Implementa\u00e7\u00e3o de Threads","text":"<p>Para implementa\u00e7\u00e3o das threads, existem diferentes formas para sua implementa\u00e7\u00e3o. Implementar o modelo de processos e threads a n\u00edvel de sistema operacional, criando abstra\u00e7\u00f5es de processos e de threads</p> <ul> <li>Implementar threads no sistema operacional</li> <li>O kernel do S.O deve criar as threads, organiza seu escalonamento e t\u00e9rmino</li> <li>Exist\u00eancia de uma tabela de threads no kernel, que cont\u00e9m os dados de cada thread</li> <li>\u00c9 necess\u00e1rio uma biblioteca de threads, para evitar overhead de contexo entre as threads</li> <li>O n\u00facleo vai ver a bibiolteca de threads em modo usu\u00e1rio</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#implementacao-em-modo-kernel","title":"Implementa\u00e7\u00e3o em modo Kernel","text":"<ul> <li>Geralmente o escalonador do S.O \u00e9 n\u00e3o-preemptivo</li> <li>Cada processo precisa de sua pr\u00f3pria tabela de threads</li> <li>Threads manipuladas por fun\u00e7\u00f5es</li> <li>Quando uma thread dor perder o controle, ela chama o procedimento do ambiente para selecionar outra thread</li> <li>Troca de contexto muito r\u00e1pida entre as threads</li> <li>Cada processo pode ter seu pr\u00f3prio algoritmo de escalonamento</li> <li>Desvantagens<ul> <li>Muito cuidado ao usar chamadas bloquantes do sistema, elas ri\u00e3o bloquear todas as threads.</li> </ul> </li> <li>A solu\u00e7\u00e3o \u00e9 colocar uma \"capa\" antes de todas as chamadas blocantes do sistema. Desta forma quando uma chamada blocante for realizada ela \u00e9 mascarada pela biblioteca de threads que faz o teste de bloqueio</li> <li>Pacote POSIX threads</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#implementacao-de-threads-em-modo-usuario","title":"Implementa\u00e7\u00e3o de Threads em Modo Usu\u00e1rio","text":"<ul> <li>Enquanto utilizar threads no espa\u00e7o de usu\u00e1rio reduz o custo de troca, as opera\u00e7\u00f5es de I/O exigem mais e podem bloquear as outras threads</li> <li>Implementar as threads em S.O continua inserindo um custo caro de troca de contexto</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#threads-em-modo-hibrido","title":"Threads em Modo H\u00edbrido","text":"<ul> <li>Busca juntar as vantagens dos threads em modo kernel e modo usu\u00e1rio</li> <li>Um processo pode ter v\u00e1rias threads de kernel, por usa vez cada kernel pode conter diversar threads em modo usu\u00e1rio</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#comparativo-de-threads-em-diversos-so","title":"Comparativo de threads em Diversos S.O","text":""},{"location":"sections/2025.2/FSO/modulo3/#modelo-de-execucao-de-threads","title":"Modelo de Execu\u00e7\u00e3o de Threads","text":"<ul> <li>N\u00famero de threads que queremos utilizar:<ul> <li>Est\u00e1tica: N\u00e3o muda durante a execu\u00e7\u00e3o, n\u00famero fixo.</li> <li>Din\u00e2mica: Uma thread \u00e9 criada para tratar cada requisi\u00e7\u00e3o.</li> </ul> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#modelo-despachantetrabalhador","title":"Modelo Despachante/Trabalhador","text":"<ul> <li>Uma thread dispachante \u00e9 reposn\u00e1vel por receber trabalho, por\u00e9m n\u00e3o processa</li> <li>O despachante seleciona uma thread trabalhadora para entregar o trabalho</li> <li>A trabalhadora executa a solicita\u00e7\u00e3o e sinaliza o despachante</li> </ul> <p>Um exemplo desse modelo \u00e9 o servidor web, que pode sofrer v\u00e1rias requisi\u00e7\u00f5es de diversos clientes, essas requisi\u00e7\u00f5es podem envolver leitura de disco. Se a mesma thread recebe uma nova requisi\u00e7\u00e3o e ler o disco, pode-se ter um problema.</p>"},{"location":"sections/2025.2/FSO/modulo3/#vantagens","title":"Vantagens","text":"<ul> <li>Consumo r\u00e1pido de mensagens</li> <li>Boa distribui\u00e7\u00e3o das requisi\u00e7\u00f5es</li> <li>flexibilidade, podemos mudar o n\u00famero de threads de forma f\u00e1cil</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#desvantagens","title":"Desvantagens","text":"<ul> <li>Pouco uso de CPU pela thread despachante</li> <li>por exemplo, de 4 threads trabalhadora e 1 despachante, em aglguns beanchmarks pode considerar apenas 80% do uso total de CPU.</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#modelo-time","title":"Modelo Time","text":"<p>Nesse modelo as threads s\u00e3o aut\u00f4nomas e gulosas por servi\u00e7o, elas acessam um \"poll\" de tarefa, obt\u00e9m e as executam.</p> <p></p>"},{"location":"sections/2025.2/FSO/modulo3/#vantagens_1","title":"Vantagens","text":"<ul> <li>Bom consumo de mensagens</li> <li>Boa distribui\u00e7\u00e3i de mensagens</li> <li>Flexibilidade em mudar o n\u00famero de tarefas</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#desvantagens_1","title":"Desvantagens","text":"<ul> <li>Cuidado na implementa\u00e7\u00e3o, em alguns computadores modernos, uma thread inicia o programa de deve ser respons\u00e1vel por criar todas as outras, depois disso, ela deve se tornar uma thread normal do time.</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#modelo-pipeline","title":"Modelo Pipeline","text":"<p>Nesse modelo, cada thread realiza uma tarefa espec\u00edfica produzinfo dados de entrada de outra thread, os dados de sa\u00edda final s\u00e3o produzidos pela \u00faltima thread.</p> <p></p>"},{"location":"sections/2025.2/FSO/modulo3/#desvantagens_2","title":"Desvantagens","text":"<ul> <li> <p>Se uma thread for muito mais lenta que as outras, todo o processamento \u00e9 desperdi\u00e7\u00e3o</p> </li> <li> <p>Muitas vezes n\u00e3o \u00e9 f\u00e1cil dividir a tarefa em um pipeline</p> </li> </ul> <p>-&gt; qual a vantagem dela entre as outras</p>"},{"location":"sections/2025.2/FSO/modulo3/#a-arte-de-multiprogramar-2","title":"A arte de Multiprogramar 2","text":"<p>Convertendo c\u00f3digo monothread em c\u00f3digo multithread \u00e9 um tarefa dif\u00edcil, especialmente com vari\u00e1veis globais</p> <p>Ex.:</p> <ul> <li>n\u00e3o-thread-safe</li> </ul> <pre><code>int vetor[256];\n\nint thread(int val, int pos){\n    vetor[pos] = val;\n}\n</code></pre> <ul> <li>thread-safe</li> </ul> <pre><code>int thread(int val, int pos){\n    int vetor[256];\n    vetor[pos] = val;\n}\n</code></pre> <p>Dessa forma definidas vari\u00e1veis globais em sistemas Unix e s\u00e3o amplamente utilizadas. Ex.: errno.</p> <ul> <li>Recebe dados via rede, verifica se vai bloquear</li> </ul> <pre><code>while(1) {\n    int len = recv(socket_client, buf, sizeof(buf), 0);\n    if(len == -1){\n        if(errno != EAGAIN &amp;&amp; errno != EWOULDBLOCK) {\n            ...\n            return -1;\n        }\n    }\n}\n</code></pre> <ul> <li>Esse problema pode acontecer com chamadas de sistema, por exemplo, alocar uma regi\u00e3o de 10 inteiros na mem\u00f3ria para o programa. <ul> <li>O probelma \u00e9, e se houver uma troca de contexto no meio da chamada? o malloc salva informa\u00e7\u00f5es em uma tabela global de mem\u00f3rias</li> </ul> </li> <li>Utilizar var\u00e1veis compartilhadas entre as threads requer cuidado.</li> <li>Em computadores modernos, a ordem de execu\u00e7\u00e3o \u00e9 definida pelo SO</li> <li>Algum desses problemas s\u00e3o conhecidas como condi\u00e7\u00f5es de Corrida.</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#condicao-de-corrida","title":"Condi\u00e7\u00e3o de Corrida","text":"<p>S\u00e3o tamb\u00e9m conhecidos como condi\u00e7\u00f5es de disputa, como o SO determina atrav\u00e9s do seu escalonador como os processos ir\u00e3o executar, n\u00e3o sabemos a ordem que os processos podem executar.</p> <ul> <li> <p>TROCAS DE CONTEXTO PODEM ACONTECER A QUALQUER MOMENTO!!</p> </li> <li> <p>Considere os seguintes processos/threads incremendando uma var\u00e1vel em mem\u00f3ria compartilhada</p> </li> <li> <p>Considere, x = 0 inicialmente. Quais valores poss\u00edveis que x pode obter ao final? </p> </li> <li> <p>Escalonamento: A -&gt; B</p> </li> </ul> <p></p> <ul> <li>Escalonamento: A -&gt; B -&gt; A</li> </ul> <p></p> <ul> <li> <p>Esse comportamento tede a ser bem indesej\u00e1vel, afinal na cabe\u00e7a do programador \"A vari\u00e1vel X foi incrementada duas vezes\"</p> </li> <li> <p>O debug dessas opera\u00e7\u00f5es podem ser extremamente complexo.</p> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#condicoes-de-corrida-2","title":"Condi\u00e7\u00f5es de corrida 2","text":"<p>Imagina que um servidor de impress\u00e3o enumere as vagas dos arquivos impressos 0, 1, 2, ... - Uma vari\u00e1vel next aponta para a pr\u00f3xima posi\u00e7\u00e3o livre a ser impressa - Imagina agoora que o processo A e B desejaram imprimir um arquivo e o servidor est\u00e1 com a seguinte configura\u00e7\u00e3o</p> <ul> <li>Escalonamento A -&gt; B</li> </ul> <p></p> <p>depois...</p> <p></p> <ul> <li>Escalonamento A -&gt; B -&gt; A</li> </ul> <p></p> <p>depois ...</p> <p></p> <ul> <li>Precisa-se assegurar que os processos que estejam trabalhando na mesma regi\u00e3o de mem\u00f3ria n\u00e3o sejam interrompidos, ou aguardem o t\u00e9rmino do outro processo antes de iniciar suas atividades. Esse processo \u00e9 conhecido como exclus\u00e3o m\u00fatua.</li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#regioes-criticas","title":"Regi\u00f5es Cr\u00edticas","text":"<ul> <li> <p>O trecho de c\u00f3digo que h\u00e1 acesso de leitura ou escrita \u00e0 dados compartilhados \u00e9 chamado de se\u00e7\u00e3o cr\u00edtica.</p> </li> <li> <p>No primeiro exemplo a se\u00e7\u00e3o cr\u00edtica \u00e9 a opera\u00e7\u00e3o de incremento, no segundo \u00e9 toda a opera\u00e7\u00e3o de escrever, a se\u00e7\u00e3o cr\u00edtica normalmente \u00e9 MAIS de uma instru\u00e7\u00e3o.</p> </li> <li> <p>Para evitar as condi\u00e7\u00f5es de corrida, s\u00e3o colocadas fun\u00e7\u00f5es antes de entrar e depois de sair da se\u00e7\u00e3o cr\u00edtica.</p> </li> <li> <p>Essas fun\u00e7\u00f5es utilizam diversas t\u00e9cnicas para impedir que os dois processos estejam simultaneamente na se\u00e7\u00e3o cr\u00edtica e garantir a exclus\u00e3o m\u00fatua.</p> </li> <li> <p>Existem fun\u00e7\u00f5es que utilizam diversas t\u00e9cnicas para impedir que dois processos estejam simultaneamente na se\u00e7\u00e3o cr\u00edtica e garantir a exclus\u00e3o m\u00fatua.</p> </li> </ul>"},{"location":"sections/2025.2/FSO/modulo3/#variaveis-de-impedimento","title":"Vari\u00e1veis de impedimento","text":"<ul> <li>Vari\u00e1vel de impedimento busca marcar se existe alg\u00faem na se\u00e7\u00e3o cr\u00edtica. Se for 1, n\u00e3o procede.</li> </ul> <pre><code>int thread(){\n    while (true) {\n        while (lock == 1) {}\n        lock = 1;\n        regiao_critica();\n        lock = 0;\n    }\n}\n</code></pre>"},{"location":"sections/2025.2/FSO/planoEnsino/","title":"Plano de Ensino FSO","text":"<p>Plano de ensino: Atualizado em: 18/08/2025</p>"},{"location":"sections/2025.2/FSO/planoEnsino/#provas","title":"Provas","text":"<ul> <li>Prova 1 : 08/10/25 e 10/10/25</li> <li>Prova 2 : 03/12/25 e 05/12/25</li> <li>Subs: 10/12/25</li> </ul> <p>Seu navegador n\u00e3o suporta iframes. Voc\u00ea pode clicar aqui para baixar o PDF.</p>"},{"location":"sections/2025.2/PALG/grafos/","title":"Grafos","text":"<ul> <li>BFS</li> <li>DSF</li> <li>Bipartido</li> <li>Direcionado</li> <li>Direcionado ac\u00edlcico</li> <li>Tapol\u00f3gico nao direcionado</li> </ul>"},{"location":"sections/2025.2/PALG/planoEnsino/","title":"Plano de Ensino","text":"<p>Plano de ensino: Atualizado em: 18/08/2025</p>"},{"location":"sections/2025.2/TPPE/designPattern/","title":"Design Patterns GOF","text":"<p>S\u00e3o modelos returiliz\u00e1veis que descrevem uma solu\u00e7\u00e3o comprovada para um problema recorrente de design de software. S\u00e3o divididos em 3 categorias:</p> <ul> <li>Criacionais: Define mecanismos para a cria\u00e7\u00e3o de objetos, tornando flex\u00edveis as decis\u00f5es de instancia\u00e7\u00e3o.</li> <li>Estruturais: Define maneiras para a composi\u00e7\u00e3o de classes e objetos, para formar estruturas maiores e mais eficientes.</li> <li>Comportamentais: Define formas de comunica\u00e7\u00e3o e distribui\u00e7\u00e3o de responsabilidade entre onjetos que interagem entre si.</li> </ul>"},{"location":"sections/2025.2/TPPE/designPattern/#pra-que-usar","title":"Pra que usar?","text":"<ul> <li>Aprendizado: Estudar padr\u00f5es ajuda a entender os princ\u00edpios de O.O e aplica-los de maneira correta e elegante.</li> <li>Reutiliza\u00e7\u00e3o: Eles fornecem um vocabul\u00e1rio comum para desenvolvidores, facilitando a comunica\u00e7\u00e3o e a reutiliza\u00e7\u00e3o de solu\u00e7\u00f5es comprovadas.</li> <li>Qualidade do c\u00f3digo: Promovem um design de software mais limpo. flex\u00edvel e f\u00e1cil de manter.</li> <li>Redu\u00e7\u00e3o de erros: Eles ajudam a evitar armadilhas comuns de projetos de software.</li> </ul>"},{"location":"sections/2025.2/TPPE/designPattern/#padroes-criacionais","title":"Padr\u00f5es Criacionais","text":""},{"location":"sections/2025.2/TPPE/designPattern/#singleton","title":"Singleton","text":"<p>O padr\u00e3o singleton garante que uma classe tennha apenas uma \u00fanica inst\u00e2ncia. \u00c9 especialmente \u00fatil em situa\u00e7\u00f5es em que a multiplicidade de inst\u00e2ncias pode levar \u00e0 sobrecarga de recursos ou gest\u00e3o inconsistente de estado.</p>"},{"location":"sections/2025.2/TPPE/designPattern/#participantes","title":"Participantes","text":"<ul> <li>Classe principal: Classe que vai inmplementar o m\u00e9todo em s\u00ed.</li> <li>Construtor privado: Evita que \u00e1lguem possa criar um obejto fora do controle da classe principal</li> <li>Atributo est\u00e1tico: Armazena a \u00fanica inst\u00e2ncia da classe para que todas as partes da aplica\u00e7\u00e3o possam acess\u00e1-la.</li> <li>M\u00e9todo de acesso: Fornece um ponto de acesso centralizado para a inst\u00e2ncia \u00fanica, o m\u00e9todo getInstance() \u00e9 chamado para obter a inst\u00e2ncia garantindo que s\u00f3 haja um ponto de acesso.</li> </ul>"},{"location":"sections/2025.2/TPPE/designPattern/#factory-method","title":"Factory Method","text":"<p>Feio para resolver em problemas relacionados \u00e0 cria\u00e7\u00e3o de objetos e sua configura\u00e7\u00e3o. Ele abstrai do cliente a tarefa de instancia\u00e7\u00e3o, permitindo que a f\u00e1brica execute a cria\u00e7\u00e3o de objetos de maneira consistente e flex\u00edvel.</p>"},{"location":"sections/2025.2/TPPE/designPattern/#participantes_1","title":"Participantes","text":"<ul> <li>F\u00e1brica m\u00e3e: Ponte de entrada para a cria\u00e7\u00e3o de ordens de servi\u00e7o.</li> <li>F\u00e1bricas espec\u00edficas: Cada um \u00e9 espec\u00edfico para cada tipo de componente.</li> <li>Objetos: Implementam funcionalidade espec\u00edficas.</li> </ul>"},{"location":"sections/2025.2/TPPE/designPattern/#padroes-estruturais","title":"Padr\u00f5es Estruturais","text":""},{"location":"sections/2025.2/TPPE/designPattern/#composite","title":"Composite","text":"<p>Combina diversos objetos, em uma estrutura hier\u00e1rquica fazendo com que um objeto se comporte como container de outros objetos.</p>"},{"location":"sections/2025.2/TPPE/designPattern/#participantes_2","title":"Participantes","text":"<ul> <li>Interface componente: Define a interface como a todos os elementos. <ul> <li>execute() que ser\u00e1 sobrescrito em cada classe.</li> </ul> </li> <li>Folha: Classe que n\u00e3o possui subclasse padr\u00e3o.</li> <li>Composto: Classe que realiza a agrega\u00e7\u00e3o de elementos similares.<ul> <li>add() Adiciona algum componente ao agregado.</li> <li>remove() Remove elemento do agregado.</li> </ul> </li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/","title":"Revis\u00e3o Framework","text":"<p>Defini\u00e7\u00e3o: Teste unit\u00e1rio examina o comportamento de uma unidade distinta de trabalho:</p> <ul> <li>M\u00e9todos</li> <li>Classes</li> <li>Componentes de software</li> </ul> <p>Testes s\u00e3o orientados a contratos de API: contrato de API \u00e9 um acordo formal entre a unidade comportamental e quem chama, definido na forma: </p> <p>Dado X como entrada, tem-se Y como sa\u00edda</p>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#requisitos-de-xunits","title":"Requisitos de xUnits","text":"<ul> <li>Testes devem executar independentemente dos demais testes unit\u00e1rios:<ul> <li>Cada teste deve ser uma inst\u00e2ncia da classe de teste</li> <li>Carregado por um loader diferente</li> </ul> </li> <li>Framework deve detectar e reportar erros, teste por teste:<ul> <li>Para cado erro deve ser reportado o contexto em que ocorreu</li> </ul> </li> <li>Deve ser f\u00e1cil definir quais testes ser\u00e3o executados<ul> <li>Deve haver algum mecanismo capaz de informar ao loader quais m\u00e9todos de teste a serem executados</li> </ul> </li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#junit-e-um-framework","title":"JUnit \u00e9 um framework","text":"<p>\"A framework is a semi-complete application\" (Martin Fowler)</p> <p>Sendo JUnit um framework de teste unit\u00e1rios, como \"completa-lo\"? - Escrevendo testes - Agrupando testes Como executar as funcionalidades do framework JUnit?     - Executando testes          - Diversos modos de execu\u00e7\u00e3o s\u00e3o oferecidos pelo JUnit</p>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#projeto-estrutural-junit-4","title":"Projeto estrutural - JUnit 4","text":""},{"location":"sections/2025.2/TPPE/frameworkJunit/#test","title":"Test","text":"<ul> <li>Define o tipo mais gen\u00e9rico (mais alto na hierarquia) das classes que comp\u00f5es a estrutura do Junit</li> <li>Desempenha o papel Component do padr\u00e3o Composite.</li> <li>Especifica o m\u00e9todo run (ie. define a assinatura) que ser\u00e1 sobrescrito por suas subclasses.</li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testcase","title":"TestCase","text":"<ul> <li>Um caso de teste \u00e9 uma inst\u00e2ncia da classe TestCase</li> <li>\u00c9 a classe folha (leaf) do padr\u00e3o Composite</li> <li>Define a estutura de m\u00e9todos a serem implementados para cada teste<ul> <li>SetUp</li> <li>TearDown</li> <li>RunTest</li> </ul> </li> <li>Implementa o padr\u00e3o TemplateMethod no m\u00e9todo run</li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testsuite","title":"TestSuite","text":"<ul> <li>Desempenha o papel composto do padr\u00e3o Composite</li> <li>Pr\u00f3pria implementa\u00e7\u00e3o do m\u00e9todo run (herdado da classe Test) consiste em chamar o m\u00e9todo run de cada um dos objetos que comp\u00f5em a su\u00edte de testes.</li> <li>M\u00e9todo addTest \u00e9 chamado para adicionar inst\u00e2ncias de qualquer subclasse de Test \u00e0 su\u00edte de testes.</li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testresult","title":"TestResult","text":"<ul> <li>Uma inst\u00e2ncia dessa classe \u00e9 associada a cada um dos testes, atrav\u00e9s do par\u00e2metro TestResult definido na assinatura do m\u00e9todo run.</li> <li>\u00c9 o respons\u00e1vel por capturar os resultados da execu\u00e7\u00f5es dos testes do caso de testes.</li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testes-simples","title":"Testes Simples","text":"<p>Estrutura t\u00edpica de testes em JUnit</p> <ul> <li>Su\u00edte de testes<ul> <li>Caso de teste<ul> <li>Testes<ul> <li>Asser\u00e7\u00f5es</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Cada n\u00edvel, nessa hierarquia, \u00e9 uma composi\u00e7\u00e3o de elementos do n\u00edvel da camada imediatamente inferior.     - Exceto su\u00edte de testes</p>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testando-execoes","title":"Testando Exe\u00e7\u00f5es","text":"<ul> <li>Testar se a unidade executa conforme esperado</li> <li>Testar se a unidade se comporta adequadamente em situa\u00e7\u00f5es de falhas tamb\u00e9m \u00e9 muito importante. 2 formas de testar o lan\u00e7amento de exce\u00e7\u00f5es:<ul> <li>Teste simples de lan\u00e7amento de exce\u00e7\u00f5es \u2192 verifica apenas se um objeto de exce\u00e7\u00e3o foi recebido pelo teste, sem considerar seus detalhes.</li> <li>Teste profundo de lan\u00e7amento de exce\u00e7\u00f5es \u2192 verifica:<ul> <li>O tipo de exce\u00e7\u00e3o lan\u00e7ada \u00e9, de fato, o tipo que se espera ser lan\u00e7ada;</li> <li>Verifica se a mensagem de exce\u00e7\u00e3o \u00e9 a que se espera;</li> <li>Verifica o estado do objeto que lan\u00e7ou a exce\u00e7\u00e3o.</li> </ul> </li> </ul> </li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#categoria-de-testes","title":"Categoria de Testes","text":"<p>Categoria de testes s\u00e3o os r\u00f3tulos que atribu\u00edmos aos testes que criamos.</p> <ul> <li>Em JUnit, cada categoria \u00e9 definida atrav\u00e9s de uma interface JAVA</li> <li>Podem ser inclu\u00eddas ou exclu\u00eddas dos casos das su\u00edtes de teste</li> <li>Definidos por Categories.class</li> </ul> <p>2 categorias:</p> <ul> <li>FuncionalidadesTestes  \u2192 para testes de funcionalidades sendo implementadas no projeto</li> <li>ExcecoesTestes \u2192 para testes de lan\u00e7amentos de exce\u00e7\u00f5es </li> <li>Cria\u00e7\u00e3o / execu\u00e7\u00e3o de su\u00edtes de testes com base nas categorias</li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#testes-com-timeout","title":"Testes com Timeout","text":"<p>\u00dateis para testar unidades que n\u00e3o podem demorar muito tempo para executarem ou que possuem tempo limite de resposta bem definido. </p> <p>Duas maneira de definir timeout:</p> <ul> <li>Para cada caso de teste isoladamente<ul> <li>Adiciona o tempo em milissegundos na anota\u00e7\u00e3o @Test</li> </ul> </li> <li>Para todos os m\u00e9todos do TestCase ou TestSuite<ul> <li>Define-se uma regra atrav\u00e9s da anota\u00e7\u00e3o @Rule</li> <li>Em seguida instancia-se um objeto de Timeout.class</li> </ul> </li> </ul>"},{"location":"sections/2025.2/TPPE/frameworkJunit/#ignorando-testes","title":"Ignorando testes","text":"<p>O m\u00e9todo de teste anotado com @Ignore n\u00e3o \u00e9 considerado durante a execu\u00e7\u00e3o do TesteCase ou TestSuite.</p> <ul> <li>\u00datil para marcar testes a serem implementados durante o desenvolvimento usando TDD. <ul> <li>Testes isolados n\u00e3o influenciara\u0303o na pr\u00e1tica TDD (barras verdes / vermelhas). </li> </ul> </li> </ul>"},{"location":"sections/treino/A/","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Treino A","text":""},{"location":"sections/treino/A/#dia-a-peito-e-triceps","title":"Dia A \u2013 Peito e Tr\u00edceps","text":"Exerc\u00edcio S\u00e9ries Repeti\u00e7\u00f5es M\u00fasculo Alvo Supino reto M\u00e1quina Articulada (ou barra) 5 15-12-10-10-8 Peitoral maior Supino inclinado Maquina Articulada 4 12-10-10-10 Peitoral superior Pullover com halter 3 12\u201315 (todas) Peitoral superior Crossover (cabo polia alta) 3 12\u201315 (todas) Peitoral inferior Tr\u00edceps pulley (barra reta) 4 8-10 (todas) Tr\u00edceps (cabe\u00e7a lateral) Tr\u00edceps testa (Barra W ou Polia Unilateral) 3 15\u201318 (todas) Tr\u00edceps (cabe\u00e7a longa) Tr\u00edceps Franc\u00eas (Polia ou Halter) 3 15\u201318 (todas) Tr\u00edceps (cabe\u00e7a medial)"},{"location":"sections/treino/B/","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Treino B","text":""},{"location":"sections/treino/B/#dia-b-costas-e-biceps","title":"Dia B \u2013 Costas e B\u00edceps","text":"Exerc\u00edcio S\u00e9ries Repeti\u00e7\u00f5es M\u00fasculo Alvo Barra fixa ou puxada frontal 4 12-10-8-8 Dorsal, b\u00edceps Remada curvada com barra 4 8\u201310 (todas) Costas (espessura) Remada unilateral com halteres 3 10\u201312 (todas) Costas (simetria) Pulldown (pegada neutra) 3 12\u201315 (todas) Dorsal inferior Rosca na Polia Baixa 4 10\u201312 (todas) B\u00edceps Rosca Banco Scott (Unilateral) 4 12\u201315 (todas) B\u00edceps B\u00edceps Martelo com halteres 4 10\u201312 (todas) B\u00edceps"},{"location":"sections/treino/B/#rosca-na-polia-baixa","title":"Rosca na Polia Baixa","text":""},{"location":"sections/treino/C/","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Treino C","text":""},{"location":"sections/treino/C/#dia-c-pernas","title":"Dia C \u2013 Pernas","text":"Exerc\u00edcio S\u00e9ries Repeti\u00e7\u00f5es M\u00fasculo Alvo Agachamento livre 5 15-12-12-10-10 Quadr\u00edceps / Gl\u00fateo Cadeira flexora 4 15-12-12-12 Posterior de coxa Cadeira extensora 3 15 Quadr\u00edceps Stiff 3 12\u201315 Posterior de coxa Panturrilha (em p\u00e9 ou leg press) 5 15\u201320 Panturrilha"},{"location":"sections/treino/D/","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Treino D","text":""},{"location":"sections/treino/D/#dia-d-ombro-trapezio-e-abdomen","title":"Dia D \u2013 Ombro, Trap\u00e9zio e Abd\u00f4men","text":"Exerc\u00edcio S\u00e9ries Repeti\u00e7\u00f5es M\u00fasculo Alvo Desenvolvimento (barra/halteres) 4 8\u201310 Ombro anterior/medial Eleva\u00e7\u00e3o lateral com halteres 3 12\u201315 Ombro lateral Eleva\u00e7\u00e3o frontal (halteres/corda) 3 12\u201315 Ombro anterior Crucifixo inverso (m\u00e1quina/banco) 3 12\u201315 Ombro posterior Encolhimento com barra 4 12\u201315 Trap\u00e9zio superior Remada alta com barra ou halteres 3 10\u201312 Trap\u00e9zio, delt\u00f3ide Abd\u00f4minal Cruzado 4 15-20 Abd\u00f4men"},{"location":"sections/treino/treinoshome/","title":"\ud83c\udfc6 Bem-vindo a Se\u00e7\u00e3o de Treinos de Hipertrofia","text":"<ul> <li>Treino feito em 01/04/2025.</li> <li>Treino para: Hipertrofia muscular</li> </ul>"},{"location":"sections/treino/treinoshome/#links-para-ir-direto-aos-treinos","title":"Links para ir direto aos treinos \ud83d\udcaa","text":"<ul> <li>Peito e Tr\u00edceps</li> <li>Costas e B\u00edceps</li> <li>Perna Completo</li> <li>Ombro, Trap\u00e9zio e Abd\u00f4men</li> </ul> <p>\ud83d\udcaa \u201cDisciplina \u00e9 o combust\u00edvel que transforma metas em conquistas.\u201d</p>"},{"location":"sections/treino/treinoshome/#sobre-a-secao","title":"\ud83d\udccc Sobre a se\u00e7\u00e3o","text":"<p>Esta se\u00e7\u00e3o foi criada com o objetivo de organizar e acompanhar uma rotina de treinamento ABCD focado em hipertrofia muscular. Com foco em evolu\u00e7\u00e3o f\u00edsica, equil\u00edbrio muscular e desempenho.</p>"},{"location":"sections/treino/treinoshome/#divisao-do-treino","title":"\ud83d\uddd3\ufe0f Divis\u00e3o do Treino","text":"Dia Grupos Musculares \ud83d\udd34 A Peito + Tr\u00edceps \ud83d\udd35 B Costas + B\u00edceps \ud83d\udfe2 C Pernas (\u00eanfase t\u00e9cnica e descanso ativo) \ud83d\udfe3 D Ombros + Trap\u00e9zio + Abd\u00f4men <p>Cada dia foi planejado para estimular os m\u00fasculos de forma completa, com varia\u00e7\u00e3o de est\u00edmulos e foco no progresso constante. \ud83d\udca5</p>"},{"location":"sections/treino/treinoshome/#objetivos","title":"\ud83d\udcc8 Objetivos","text":"<ul> <li>\ud83d\udccd Estimular a hipertrofia de forma eficiente</li> <li>\ud83e\udde0 Trabalhar com intelig\u00eancia muscular (mind-muscle connection)</li> </ul>"},{"location":"sections/treino/treinoshome/#mentalidade","title":"\ud83e\udde0 Mentalidade","text":"<p>\ud83d\udd25 \u201cN\u00e3o existe crescimento na zona de conforto.\u201d \ud83e\udd2f \u201cVoc\u00ea \u00e9 mais forte do que imagina. Seu corpo acompanha sua mente.\u201d</p>"},{"location":"sections/treino/treinoshome/#gerador-de-treino-personalizado","title":"Gerador de Treino Personalizado","text":"Peito  Costas  B\u00edceps  Tr\u00edceps  Perna  Ombro Gerar Treino"}]}